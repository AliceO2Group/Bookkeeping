/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.0.0-beta2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ArrayOfSubsystemsResponseMeta.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ArrayOfSubsystemsResponseMeta::ArrayOfSubsystemsResponseMeta()
{
    m_PageIsSet = false;
}

ArrayOfSubsystemsResponseMeta::~ArrayOfSubsystemsResponseMeta()
{
}

void ArrayOfSubsystemsResponseMeta::validate()
{
    // TODO: implement validation
}

web::json::value ArrayOfSubsystemsResponseMeta::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PageIsSet)
    {
        val[utility::conversions::to_string_t("page")] = ModelBase::toJson(m_Page);
    }

    return val;
}

bool ArrayOfSubsystemsResponseMeta::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("page")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("page"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PaginationMeta> refVal_page;
            ok &= ModelBase::fromJson(fieldValue, refVal_page);
            setPage(refVal_page);
        }
    }
    return ok;
}

void ArrayOfSubsystemsResponseMeta::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_PageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("page"), m_Page));
    }
}

bool ArrayOfSubsystemsResponseMeta::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("page")))
    {
        std::shared_ptr<PaginationMeta> refVal_page;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("page")), refVal_page );
        setPage(refVal_page);
    }
    return ok;
}

std::shared_ptr<PaginationMeta> ArrayOfSubsystemsResponseMeta::getPage() const
{
    return m_Page;
}

void ArrayOfSubsystemsResponseMeta::setPage(const std::shared_ptr<PaginationMeta>& value)
{
    m_Page = value;
    m_PageIsSet = true;
}

bool ArrayOfSubsystemsResponseMeta::pageIsSet() const
{
    return m_PageIsSet;
}

void ArrayOfSubsystemsResponseMeta::unsetPage()
{
    m_PageIsSet = false;
}
}
}
}
}


