/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Run.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Run::Run()
{
    m_EnvironmentId = utility::conversions::to_string_t("");
    m_EnvironmentIdIsSet = false;
    m_BytesReadOut = 0L;
    m_BytesReadOutIsSet = false;
    m_CreatedAt = 0L;
    m_CreatedAtIsSet = false;
    m_Id = 0L;
    m_IdIsSet = false;
    m_NDetectors = 0L;
    m_NDetectorsIsSet = false;
    m_NEpns = 0L;
    m_NEpnsIsSet = false;
    m_NFlps = 0L;
    m_NFlpsIsSet = false;
    m_NSubtimeframes = 0L;
    m_NSubtimeframesIsSet = false;
    m_RunNumber = 0L;
    m_RunNumberIsSet = false;
    m_RunQualityIsSet = false;
    m_RunTypeIsSet = false;
    m_TimeO2End = 0L;
    m_TimeO2EndIsSet = false;
    m_TimeO2Start = 0L;
    m_TimeO2StartIsSet = false;
    m_TimeTrgEnd = 0L;
    m_TimeTrgEndIsSet = false;
    m_TimeTrgStart = 0L;
    m_TimeTrgStartIsSet = false;
    m_Dd_flp = false;
    m_Dd_flpIsSet = false;
    m_Dcs = false;
    m_DcsIsSet = false;
    m_Epn = false;
    m_EpnIsSet = false;
    m_EpnTopology = utility::conversions::to_string_t("");
    m_EpnTopologyIsSet = false;
    m_UpdatedAt = 0L;
    m_UpdatedAtIsSet = false;
}

Run::~Run()
{
}

void Run::validate()
{
    // TODO: implement validation
}

web::json::value Run::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EnvironmentIdIsSet)
    {
        val[utility::conversions::to_string_t(U("environmentId"))] = ModelBase::toJson(m_EnvironmentId);
    }
    if(m_BytesReadOutIsSet)
    {
        val[utility::conversions::to_string_t(U("bytesReadOut"))] = ModelBase::toJson(m_BytesReadOut);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_NDetectorsIsSet)
    {
        val[utility::conversions::to_string_t(U("nDetectors"))] = ModelBase::toJson(m_NDetectors);
    }
    if(m_NEpnsIsSet)
    {
        val[utility::conversions::to_string_t(U("nEpns"))] = ModelBase::toJson(m_NEpns);
    }
    if(m_NFlpsIsSet)
    {
        val[utility::conversions::to_string_t(U("nFlps"))] = ModelBase::toJson(m_NFlps);
    }
    if(m_NSubtimeframesIsSet)
    {
        val[utility::conversions::to_string_t(U("nSubtimeframes"))] = ModelBase::toJson(m_NSubtimeframes);
    }
    if(m_RunNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("runNumber"))] = ModelBase::toJson(m_RunNumber);
    }
    if(m_RunQualityIsSet)
    {
        val[utility::conversions::to_string_t(U("runQuality"))] = ModelBase::toJson(m_RunQuality);
    }
    if(m_RunTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("runType"))] = ModelBase::toJson(m_RunType);
    }
    if(m_TimeO2EndIsSet)
    {
        val[utility::conversions::to_string_t(U("timeO2End"))] = ModelBase::toJson(m_TimeO2End);
    }
    if(m_TimeO2StartIsSet)
    {
        val[utility::conversions::to_string_t(U("timeO2Start"))] = ModelBase::toJson(m_TimeO2Start);
    }
    if(m_TimeTrgEndIsSet)
    {
        val[utility::conversions::to_string_t(U("timeTrgEnd"))] = ModelBase::toJson(m_TimeTrgEnd);
    }
    if(m_TimeTrgStartIsSet)
    {
        val[utility::conversions::to_string_t(U("timeTrgStart"))] = ModelBase::toJson(m_TimeTrgStart);
    }
    if(m_Dd_flpIsSet)
    {
        val[utility::conversions::to_string_t(U("dd_flp"))] = ModelBase::toJson(m_Dd_flp);
    }
    if(m_DcsIsSet)
    {
        val[utility::conversions::to_string_t(U("dcs"))] = ModelBase::toJson(m_Dcs);
    }
    if(m_EpnIsSet)
    {
        val[utility::conversions::to_string_t(U("epn"))] = ModelBase::toJson(m_Epn);
    }
    if(m_EpnTopologyIsSet)
    {
        val[utility::conversions::to_string_t(U("epnTopology"))] = ModelBase::toJson(m_EpnTopology);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedAt"))] = ModelBase::toJson(m_UpdatedAt);
    }

    return val;
}

bool Run::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("environmentId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("environmentId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_environmentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_environmentId);
            setEnvironmentId(refVal_environmentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bytesReadOut"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bytesReadOut")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_bytesReadOut;
            ok &= ModelBase::fromJson(fieldValue, refVal_bytesReadOut);
            setBytesReadOut(refVal_bytesReadOut);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nDetectors"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nDetectors")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_nDetectors;
            ok &= ModelBase::fromJson(fieldValue, refVal_nDetectors);
            setNDetectors(refVal_nDetectors);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nEpns"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nEpns")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_nEpns;
            ok &= ModelBase::fromJson(fieldValue, refVal_nEpns);
            setNEpns(refVal_nEpns);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nFlps"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nFlps")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_nFlps;
            ok &= ModelBase::fromJson(fieldValue, refVal_nFlps);
            setNFlps(refVal_nFlps);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nSubtimeframes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nSubtimeframes")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_nSubtimeframes;
            ok &= ModelBase::fromJson(fieldValue, refVal_nSubtimeframes);
            setNSubtimeframes(refVal_nSubtimeframes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("runNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("runNumber")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_runNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_runNumber);
            setRunNumber(refVal_runNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("runQuality"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("runQuality")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RunQuality> refVal_runQuality;
            ok &= ModelBase::fromJson(fieldValue, refVal_runQuality);
            setRunQuality(refVal_runQuality);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("runType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("runType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RunType> refVal_runType;
            ok &= ModelBase::fromJson(fieldValue, refVal_runType);
            setRunType(refVal_runType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timeO2End"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timeO2End")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_timeO2End;
            ok &= ModelBase::fromJson(fieldValue, refVal_timeO2End);
            setTimeO2End(refVal_timeO2End);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timeO2Start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timeO2Start")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_timeO2Start;
            ok &= ModelBase::fromJson(fieldValue, refVal_timeO2Start);
            setTimeO2Start(refVal_timeO2Start);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timeTrgEnd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timeTrgEnd")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_timeTrgEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_timeTrgEnd);
            setTimeTrgEnd(refVal_timeTrgEnd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timeTrgStart"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timeTrgStart")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_timeTrgStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_timeTrgStart);
            setTimeTrgStart(refVal_timeTrgStart);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dd_flp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dd_flp")));
        if(!fieldValue.is_null())
        {
            bool refVal_dd_flp;
            ok &= ModelBase::fromJson(fieldValue, refVal_dd_flp);
            setDdFlp(refVal_dd_flp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dcs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dcs")));
        if(!fieldValue.is_null())
        {
            bool refVal_dcs;
            ok &= ModelBase::fromJson(fieldValue, refVal_dcs);
            setDcs(refVal_dcs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("epn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("epn")));
        if(!fieldValue.is_null())
        {
            bool refVal_epn;
            ok &= ModelBase::fromJson(fieldValue, refVal_epn);
            setEpn(refVal_epn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("epnTopology"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("epnTopology")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_epnTopology;
            ok &= ModelBase::fromJson(fieldValue, refVal_epnTopology);
            setEpnTopology(refVal_epnTopology);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedAt")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_updatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedAt);
            setUpdatedAt(refVal_updatedAt);
        }
    }
    return ok;
}

void Run::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_EnvironmentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("environmentId")), m_EnvironmentId));
    }
    if(m_BytesReadOutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bytesReadOut")), m_BytesReadOut));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_NDetectorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nDetectors")), m_NDetectors));
    }
    if(m_NEpnsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nEpns")), m_NEpns));
    }
    if(m_NFlpsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nFlps")), m_NFlps));
    }
    if(m_NSubtimeframesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nSubtimeframes")), m_NSubtimeframes));
    }
    if(m_RunNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("runNumber")), m_RunNumber));
    }
    if(m_RunQualityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("runQuality")), m_RunQuality));
    }
    if(m_RunTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("runType")), m_RunType));
    }
    if(m_TimeO2EndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timeO2End")), m_TimeO2End));
    }
    if(m_TimeO2StartIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timeO2Start")), m_TimeO2Start));
    }
    if(m_TimeTrgEndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timeTrgEnd")), m_TimeTrgEnd));
    }
    if(m_TimeTrgStartIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timeTrgStart")), m_TimeTrgStart));
    }
    if(m_Dd_flpIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dd_flp")), m_Dd_flp));
    }
    if(m_DcsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dcs")), m_Dcs));
    }
    if(m_EpnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("epn")), m_Epn));
    }
    if(m_EpnTopologyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("epnTopology")), m_EpnTopology));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedAt")), m_UpdatedAt));
    }
}

bool Run::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("environmentId"))))
    {
        utility::string_t refVal_environmentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("environmentId"))), refVal_environmentId );
        setEnvironmentId(refVal_environmentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bytesReadOut"))))
    {
        int64_t refVal_bytesReadOut;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bytesReadOut"))), refVal_bytesReadOut );
        setBytesReadOut(refVal_bytesReadOut);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        int64_t refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int64_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nDetectors"))))
    {
        int64_t refVal_nDetectors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nDetectors"))), refVal_nDetectors );
        setNDetectors(refVal_nDetectors);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nEpns"))))
    {
        int64_t refVal_nEpns;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nEpns"))), refVal_nEpns );
        setNEpns(refVal_nEpns);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nFlps"))))
    {
        int64_t refVal_nFlps;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nFlps"))), refVal_nFlps );
        setNFlps(refVal_nFlps);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nSubtimeframes"))))
    {
        int64_t refVal_nSubtimeframes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nSubtimeframes"))), refVal_nSubtimeframes );
        setNSubtimeframes(refVal_nSubtimeframes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("runNumber"))))
    {
        int64_t refVal_runNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("runNumber"))), refVal_runNumber );
        setRunNumber(refVal_runNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("runQuality"))))
    {
        std::shared_ptr<RunQuality> refVal_runQuality;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("runQuality"))), refVal_runQuality );
        setRunQuality(refVal_runQuality);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("runType"))))
    {
        std::shared_ptr<RunType> refVal_runType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("runType"))), refVal_runType );
        setRunType(refVal_runType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timeO2End"))))
    {
        int64_t refVal_timeO2End;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timeO2End"))), refVal_timeO2End );
        setTimeO2End(refVal_timeO2End);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timeO2Start"))))
    {
        int64_t refVal_timeO2Start;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timeO2Start"))), refVal_timeO2Start );
        setTimeO2Start(refVal_timeO2Start);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timeTrgEnd"))))
    {
        int64_t refVal_timeTrgEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timeTrgEnd"))), refVal_timeTrgEnd );
        setTimeTrgEnd(refVal_timeTrgEnd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timeTrgStart"))))
    {
        int64_t refVal_timeTrgStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timeTrgStart"))), refVal_timeTrgStart );
        setTimeTrgStart(refVal_timeTrgStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dd_flp"))))
    {
        bool refVal_dd_flp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dd_flp"))), refVal_dd_flp );
        setDdFlp(refVal_dd_flp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dcs"))))
    {
        bool refVal_dcs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dcs"))), refVal_dcs );
        setDcs(refVal_dcs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("epn"))))
    {
        bool refVal_epn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("epn"))), refVal_epn );
        setEpn(refVal_epn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("epnTopology"))))
    {
        utility::string_t refVal_epnTopology;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("epnTopology"))), refVal_epnTopology );
        setEpnTopology(refVal_epnTopology);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedAt"))))
    {
        int64_t refVal_updatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedAt"))), refVal_updatedAt );
        setUpdatedAt(refVal_updatedAt);
    }
    return ok;
}

utility::string_t Run::getEnvironmentId() const
{
    return m_EnvironmentId;
}

void Run::setEnvironmentId(const utility::string_t& value)
{
    m_EnvironmentId = value;
    m_EnvironmentIdIsSet = true;
}

bool Run::environmentIdIsSet() const
{
    return m_EnvironmentIdIsSet;
}

void Run::unsetEnvironmentId()
{
    m_EnvironmentIdIsSet = false;
}
int64_t Run::getBytesReadOut() const
{
    return m_BytesReadOut;
}

void Run::setBytesReadOut(int64_t value)
{
    m_BytesReadOut = value;
    m_BytesReadOutIsSet = true;
}

bool Run::bytesReadOutIsSet() const
{
    return m_BytesReadOutIsSet;
}

void Run::unsetBytesReadOut()
{
    m_BytesReadOutIsSet = false;
}
int64_t Run::getCreatedAt() const
{
    return m_CreatedAt;
}

void Run::setCreatedAt(int64_t value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool Run::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void Run::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
int64_t Run::getId() const
{
    return m_Id;
}

void Run::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Run::idIsSet() const
{
    return m_IdIsSet;
}

void Run::unsetId()
{
    m_IdIsSet = false;
}
int64_t Run::getNDetectors() const
{
    return m_NDetectors;
}

void Run::setNDetectors(int64_t value)
{
    m_NDetectors = value;
    m_NDetectorsIsSet = true;
}

bool Run::nDetectorsIsSet() const
{
    return m_NDetectorsIsSet;
}

void Run::unsetNDetectors()
{
    m_NDetectorsIsSet = false;
}
int64_t Run::getNEpns() const
{
    return m_NEpns;
}

void Run::setNEpns(int64_t value)
{
    m_NEpns = value;
    m_NEpnsIsSet = true;
}

bool Run::nEpnsIsSet() const
{
    return m_NEpnsIsSet;
}

void Run::unsetNEpns()
{
    m_NEpnsIsSet = false;
}
int64_t Run::getNFlps() const
{
    return m_NFlps;
}

void Run::setNFlps(int64_t value)
{
    m_NFlps = value;
    m_NFlpsIsSet = true;
}

bool Run::nFlpsIsSet() const
{
    return m_NFlpsIsSet;
}

void Run::unsetNFlps()
{
    m_NFlpsIsSet = false;
}
int64_t Run::getNSubtimeframes() const
{
    return m_NSubtimeframes;
}

void Run::setNSubtimeframes(int64_t value)
{
    m_NSubtimeframes = value;
    m_NSubtimeframesIsSet = true;
}

bool Run::nSubtimeframesIsSet() const
{
    return m_NSubtimeframesIsSet;
}

void Run::unsetNSubtimeframes()
{
    m_NSubtimeframesIsSet = false;
}
int64_t Run::getRunNumber() const
{
    return m_RunNumber;
}

void Run::setRunNumber(int64_t value)
{
    m_RunNumber = value;
    m_RunNumberIsSet = true;
}

bool Run::runNumberIsSet() const
{
    return m_RunNumberIsSet;
}

void Run::unsetRunNumber()
{
    m_RunNumberIsSet = false;
}
std::shared_ptr<RunQuality> Run::getRunQuality() const
{
    return m_RunQuality;
}

void Run::setRunQuality(const std::shared_ptr<RunQuality>& value)
{
    m_RunQuality = value;
    m_RunQualityIsSet = true;
}

bool Run::runQualityIsSet() const
{
    return m_RunQualityIsSet;
}

void Run::unsetRunQuality()
{
    m_RunQualityIsSet = false;
}
std::shared_ptr<RunType> Run::getRunType() const
{
    return m_RunType;
}

void Run::setRunType(const std::shared_ptr<RunType>& value)
{
    m_RunType = value;
    m_RunTypeIsSet = true;
}

bool Run::runTypeIsSet() const
{
    return m_RunTypeIsSet;
}

void Run::unsetRunType()
{
    m_RunTypeIsSet = false;
}
int64_t Run::getTimeO2End() const
{
    return m_TimeO2End;
}

void Run::setTimeO2End(int64_t value)
{
    m_TimeO2End = value;
    m_TimeO2EndIsSet = true;
}

bool Run::timeO2EndIsSet() const
{
    return m_TimeO2EndIsSet;
}

void Run::unsetTimeO2End()
{
    m_TimeO2EndIsSet = false;
}
int64_t Run::getTimeO2Start() const
{
    return m_TimeO2Start;
}

void Run::setTimeO2Start(int64_t value)
{
    m_TimeO2Start = value;
    m_TimeO2StartIsSet = true;
}

bool Run::timeO2StartIsSet() const
{
    return m_TimeO2StartIsSet;
}

void Run::unsetTimeO2Start()
{
    m_TimeO2StartIsSet = false;
}
int64_t Run::getTimeTrgEnd() const
{
    return m_TimeTrgEnd;
}

void Run::setTimeTrgEnd(int64_t value)
{
    m_TimeTrgEnd = value;
    m_TimeTrgEndIsSet = true;
}

bool Run::timeTrgEndIsSet() const
{
    return m_TimeTrgEndIsSet;
}

void Run::unsetTimeTrgEnd()
{
    m_TimeTrgEndIsSet = false;
}
int64_t Run::getTimeTrgStart() const
{
    return m_TimeTrgStart;
}

void Run::setTimeTrgStart(int64_t value)
{
    m_TimeTrgStart = value;
    m_TimeTrgStartIsSet = true;
}

bool Run::timeTrgStartIsSet() const
{
    return m_TimeTrgStartIsSet;
}

void Run::unsetTimeTrgStart()
{
    m_TimeTrgStartIsSet = false;
}
bool Run::isDdFlp() const
{
    return m_Dd_flp;
}

void Run::setDdFlp(bool value)
{
    m_Dd_flp = value;
    m_Dd_flpIsSet = true;
}

bool Run::ddFlpIsSet() const
{
    return m_Dd_flpIsSet;
}

void Run::unsetDd_flp()
{
    m_Dd_flpIsSet = false;
}
bool Run::isDcs() const
{
    return m_Dcs;
}

void Run::setDcs(bool value)
{
    m_Dcs = value;
    m_DcsIsSet = true;
}

bool Run::dcsIsSet() const
{
    return m_DcsIsSet;
}

void Run::unsetDcs()
{
    m_DcsIsSet = false;
}
bool Run::isEpn() const
{
    return m_Epn;
}

void Run::setEpn(bool value)
{
    m_Epn = value;
    m_EpnIsSet = true;
}

bool Run::epnIsSet() const
{
    return m_EpnIsSet;
}

void Run::unsetEpn()
{
    m_EpnIsSet = false;
}
utility::string_t Run::getEpnTopology() const
{
    return m_EpnTopology;
}

void Run::setEpnTopology(const utility::string_t& value)
{
    m_EpnTopology = value;
    m_EpnTopologyIsSet = true;
}

bool Run::epnTopologyIsSet() const
{
    return m_EpnTopologyIsSet;
}

void Run::unsetEpnTopology()
{
    m_EpnTopologyIsSet = false;
}
int64_t Run::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void Run::setUpdatedAt(int64_t value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool Run::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void Run::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
}
}
}
}


