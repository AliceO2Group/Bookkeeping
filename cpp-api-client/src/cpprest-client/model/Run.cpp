/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.0.0-beta2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Run.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Run::Run()
{
    m_ActivityId = utility::conversions::to_string_t("");
    m_ActivityIdIsSet = false;
    m_BytesReadOut = 0;
    m_BytesReadOutIsSet = false;
    m_CreatedAt = 0;
    m_CreatedAtIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_NDetectors = 0;
    m_NDetectorsIsSet = false;
    m_NEpns = 0;
    m_NEpnsIsSet = false;
    m_NFlps = 0;
    m_NFlpsIsSet = false;
    m_NSubtimeframes = 0;
    m_NSubtimeframesIsSet = false;
    m_RunNumber = 0;
    m_RunNumberIsSet = false;
    m_RunQualityIsSet = false;
    m_RunTypeIsSet = false;
    m_TimeO2End = 0;
    m_TimeO2EndIsSet = false;
    m_TimeO2Start = 0;
    m_TimeO2StartIsSet = false;
    m_TimeTrgEnd = 0;
    m_TimeTrgEndIsSet = false;
    m_TimeTrgStart = 0;
    m_TimeTrgStartIsSet = false;
    m_UpdatedAt = 0;
    m_UpdatedAtIsSet = false;
}

Run::~Run()
{
}

void Run::validate()
{
    // TODO: implement validation
}

web::json::value Run::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ActivityIdIsSet)
    {
        val[utility::conversions::to_string_t("activityId")] = ModelBase::toJson(m_ActivityId);
    }
    if(m_BytesReadOutIsSet)
    {
        val[utility::conversions::to_string_t("bytesReadOut")] = ModelBase::toJson(m_BytesReadOut);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NDetectorsIsSet)
    {
        val[utility::conversions::to_string_t("nDetectors")] = ModelBase::toJson(m_NDetectors);
    }
    if(m_NEpnsIsSet)
    {
        val[utility::conversions::to_string_t("nEpns")] = ModelBase::toJson(m_NEpns);
    }
    if(m_NFlpsIsSet)
    {
        val[utility::conversions::to_string_t("nFlps")] = ModelBase::toJson(m_NFlps);
    }
    if(m_NSubtimeframesIsSet)
    {
        val[utility::conversions::to_string_t("nSubtimeframes")] = ModelBase::toJson(m_NSubtimeframes);
    }
    if(m_RunNumberIsSet)
    {
        val[utility::conversions::to_string_t("runNumber")] = ModelBase::toJson(m_RunNumber);
    }
    if(m_RunQualityIsSet)
    {
        val[utility::conversions::to_string_t("runQuality")] = ModelBase::toJson(m_RunQuality);
    }
    if(m_RunTypeIsSet)
    {
        val[utility::conversions::to_string_t("runType")] = ModelBase::toJson(m_RunType);
    }
    if(m_TimeO2EndIsSet)
    {
        val[utility::conversions::to_string_t("timeO2End")] = ModelBase::toJson(m_TimeO2End);
    }
    if(m_TimeO2StartIsSet)
    {
        val[utility::conversions::to_string_t("timeO2Start")] = ModelBase::toJson(m_TimeO2Start);
    }
    if(m_TimeTrgEndIsSet)
    {
        val[utility::conversions::to_string_t("timeTrgEnd")] = ModelBase::toJson(m_TimeTrgEnd);
    }
    if(m_TimeTrgStartIsSet)
    {
        val[utility::conversions::to_string_t("timeTrgStart")] = ModelBase::toJson(m_TimeTrgStart);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t("updatedAt")] = ModelBase::toJson(m_UpdatedAt);
    }

    return val;
}

bool Run::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("activityId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("activityId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_activityId;
            ok &= ModelBase::fromJson(fieldValue, refVal_activityId);
            setActivityId(refVal_activityId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bytesReadOut")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bytesReadOut"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_bytesReadOut;
            ok &= ModelBase::fromJson(fieldValue, refVal_bytesReadOut);
            setBytesReadOut(refVal_bytesReadOut);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAt"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nDetectors")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nDetectors"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_nDetectors;
            ok &= ModelBase::fromJson(fieldValue, refVal_nDetectors);
            setNDetectors(refVal_nDetectors);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nEpns")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nEpns"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_nEpns;
            ok &= ModelBase::fromJson(fieldValue, refVal_nEpns);
            setNEpns(refVal_nEpns);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nFlps")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nFlps"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_nFlps;
            ok &= ModelBase::fromJson(fieldValue, refVal_nFlps);
            setNFlps(refVal_nFlps);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nSubtimeframes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nSubtimeframes"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_nSubtimeframes;
            ok &= ModelBase::fromJson(fieldValue, refVal_nSubtimeframes);
            setNSubtimeframes(refVal_nSubtimeframes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("runNumber")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("runNumber"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_runNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_runNumber);
            setRunNumber(refVal_runNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("runQuality")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("runQuality"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RunQuality> refVal_runQuality;
            ok &= ModelBase::fromJson(fieldValue, refVal_runQuality);
            setRunQuality(refVal_runQuality);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("runType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("runType"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RunType> refVal_runType;
            ok &= ModelBase::fromJson(fieldValue, refVal_runType);
            setRunType(refVal_runType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timeO2End")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("timeO2End"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_timeO2End;
            ok &= ModelBase::fromJson(fieldValue, refVal_timeO2End);
            setTimeO2End(refVal_timeO2End);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timeO2Start")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("timeO2Start"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_timeO2Start;
            ok &= ModelBase::fromJson(fieldValue, refVal_timeO2Start);
            setTimeO2Start(refVal_timeO2Start);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timeTrgEnd")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("timeTrgEnd"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_timeTrgEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_timeTrgEnd);
            setTimeTrgEnd(refVal_timeTrgEnd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timeTrgStart")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("timeTrgStart"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_timeTrgStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_timeTrgStart);
            setTimeTrgStart(refVal_timeTrgStart);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updatedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("updatedAt"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_updatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedAt);
            setUpdatedAt(refVal_updatedAt);
        }
    }
    return ok;
}

void Run::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ActivityIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("activityId"), m_ActivityId));
    }
    if(m_BytesReadOutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bytesReadOut"), m_BytesReadOut));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NDetectorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nDetectors"), m_NDetectors));
    }
    if(m_NEpnsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nEpns"), m_NEpns));
    }
    if(m_NFlpsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nFlps"), m_NFlps));
    }
    if(m_NSubtimeframesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nSubtimeframes"), m_NSubtimeframes));
    }
    if(m_RunNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("runNumber"), m_RunNumber));
    }
    if(m_RunQualityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("runQuality"), m_RunQuality));
    }
    if(m_RunTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("runType"), m_RunType));
    }
    if(m_TimeO2EndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timeO2End"), m_TimeO2End));
    }
    if(m_TimeO2StartIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timeO2Start"), m_TimeO2Start));
    }
    if(m_TimeTrgEndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timeTrgEnd"), m_TimeTrgEnd));
    }
    if(m_TimeTrgStartIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timeTrgStart"), m_TimeTrgStart));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updatedAt"), m_UpdatedAt));
    }
}

bool Run::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("activityId")))
    {
        utility::string_t refVal_activityId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("activityId")), refVal_activityId );
        setActivityId(refVal_activityId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bytesReadOut")))
    {
        int32_t refVal_bytesReadOut;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bytesReadOut")), refVal_bytesReadOut );
        setBytesReadOut(refVal_bytesReadOut);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        int32_t refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nDetectors")))
    {
        int32_t refVal_nDetectors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nDetectors")), refVal_nDetectors );
        setNDetectors(refVal_nDetectors);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nEpns")))
    {
        int32_t refVal_nEpns;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nEpns")), refVal_nEpns );
        setNEpns(refVal_nEpns);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nFlps")))
    {
        int32_t refVal_nFlps;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nFlps")), refVal_nFlps );
        setNFlps(refVal_nFlps);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nSubtimeframes")))
    {
        int32_t refVal_nSubtimeframes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nSubtimeframes")), refVal_nSubtimeframes );
        setNSubtimeframes(refVal_nSubtimeframes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("runNumber")))
    {
        int32_t refVal_runNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("runNumber")), refVal_runNumber );
        setRunNumber(refVal_runNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("runQuality")))
    {
        std::shared_ptr<RunQuality> refVal_runQuality;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("runQuality")), refVal_runQuality );
        setRunQuality(refVal_runQuality);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("runType")))
    {
        std::shared_ptr<RunType> refVal_runType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("runType")), refVal_runType );
        setRunType(refVal_runType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timeO2End")))
    {
        int32_t refVal_timeO2End;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("timeO2End")), refVal_timeO2End );
        setTimeO2End(refVal_timeO2End);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timeO2Start")))
    {
        int32_t refVal_timeO2Start;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("timeO2Start")), refVal_timeO2Start );
        setTimeO2Start(refVal_timeO2Start);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timeTrgEnd")))
    {
        int32_t refVal_timeTrgEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("timeTrgEnd")), refVal_timeTrgEnd );
        setTimeTrgEnd(refVal_timeTrgEnd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timeTrgStart")))
    {
        int32_t refVal_timeTrgStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("timeTrgStart")), refVal_timeTrgStart );
        setTimeTrgStart(refVal_timeTrgStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updatedAt")))
    {
        int32_t refVal_updatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("updatedAt")), refVal_updatedAt );
        setUpdatedAt(refVal_updatedAt);
    }
    return ok;
}

utility::string_t Run::getActivityId() const
{
    return m_ActivityId;
}

void Run::setActivityId(const utility::string_t& value)
{
    m_ActivityId = value;
    m_ActivityIdIsSet = true;
}

bool Run::activityIdIsSet() const
{
    return m_ActivityIdIsSet;
}

void Run::unsetActivityId()
{
    m_ActivityIdIsSet = false;
}
int32_t Run::getBytesReadOut() const
{
    return m_BytesReadOut;
}

void Run::setBytesReadOut(int32_t value)
{
    m_BytesReadOut = value;
    m_BytesReadOutIsSet = true;
}

bool Run::bytesReadOutIsSet() const
{
    return m_BytesReadOutIsSet;
}

void Run::unsetBytesReadOut()
{
    m_BytesReadOutIsSet = false;
}
int32_t Run::getCreatedAt() const
{
    return m_CreatedAt;
}

void Run::setCreatedAt(int32_t value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool Run::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void Run::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
int32_t Run::getId() const
{
    return m_Id;
}

void Run::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Run::idIsSet() const
{
    return m_IdIsSet;
}

void Run::unsetId()
{
    m_IdIsSet = false;
}
int32_t Run::getNDetectors() const
{
    return m_NDetectors;
}

void Run::setNDetectors(int32_t value)
{
    m_NDetectors = value;
    m_NDetectorsIsSet = true;
}

bool Run::nDetectorsIsSet() const
{
    return m_NDetectorsIsSet;
}

void Run::unsetNDetectors()
{
    m_NDetectorsIsSet = false;
}
int32_t Run::getNEpns() const
{
    return m_NEpns;
}

void Run::setNEpns(int32_t value)
{
    m_NEpns = value;
    m_NEpnsIsSet = true;
}

bool Run::nEpnsIsSet() const
{
    return m_NEpnsIsSet;
}

void Run::unsetNEpns()
{
    m_NEpnsIsSet = false;
}
int32_t Run::getNFlps() const
{
    return m_NFlps;
}

void Run::setNFlps(int32_t value)
{
    m_NFlps = value;
    m_NFlpsIsSet = true;
}

bool Run::nFlpsIsSet() const
{
    return m_NFlpsIsSet;
}

void Run::unsetNFlps()
{
    m_NFlpsIsSet = false;
}
int32_t Run::getNSubtimeframes() const
{
    return m_NSubtimeframes;
}

void Run::setNSubtimeframes(int32_t value)
{
    m_NSubtimeframes = value;
    m_NSubtimeframesIsSet = true;
}

bool Run::nSubtimeframesIsSet() const
{
    return m_NSubtimeframesIsSet;
}

void Run::unsetNSubtimeframes()
{
    m_NSubtimeframesIsSet = false;
}
int32_t Run::getRunNumber() const
{
    return m_RunNumber;
}

void Run::setRunNumber(int32_t value)
{
    m_RunNumber = value;
    m_RunNumberIsSet = true;
}

bool Run::runNumberIsSet() const
{
    return m_RunNumberIsSet;
}

void Run::unsetRunNumber()
{
    m_RunNumberIsSet = false;
}
std::shared_ptr<RunQuality> Run::getRunQuality() const
{
    return m_RunQuality;
}

void Run::setRunQuality(const std::shared_ptr<RunQuality>& value)
{
    m_RunQuality = value;
    m_RunQualityIsSet = true;
}

bool Run::runQualityIsSet() const
{
    return m_RunQualityIsSet;
}

void Run::unsetRunQuality()
{
    m_RunQualityIsSet = false;
}
std::shared_ptr<RunType> Run::getRunType() const
{
    return m_RunType;
}

void Run::setRunType(const std::shared_ptr<RunType>& value)
{
    m_RunType = value;
    m_RunTypeIsSet = true;
}

bool Run::runTypeIsSet() const
{
    return m_RunTypeIsSet;
}

void Run::unsetRunType()
{
    m_RunTypeIsSet = false;
}
int32_t Run::getTimeO2End() const
{
    return m_TimeO2End;
}

void Run::setTimeO2End(int32_t value)
{
    m_TimeO2End = value;
    m_TimeO2EndIsSet = true;
}

bool Run::timeO2EndIsSet() const
{
    return m_TimeO2EndIsSet;
}

void Run::unsetTimeO2End()
{
    m_TimeO2EndIsSet = false;
}
int32_t Run::getTimeO2Start() const
{
    return m_TimeO2Start;
}

void Run::setTimeO2Start(int32_t value)
{
    m_TimeO2Start = value;
    m_TimeO2StartIsSet = true;
}

bool Run::timeO2StartIsSet() const
{
    return m_TimeO2StartIsSet;
}

void Run::unsetTimeO2Start()
{
    m_TimeO2StartIsSet = false;
}
int32_t Run::getTimeTrgEnd() const
{
    return m_TimeTrgEnd;
}

void Run::setTimeTrgEnd(int32_t value)
{
    m_TimeTrgEnd = value;
    m_TimeTrgEndIsSet = true;
}

bool Run::timeTrgEndIsSet() const
{
    return m_TimeTrgEndIsSet;
}

void Run::unsetTimeTrgEnd()
{
    m_TimeTrgEndIsSet = false;
}
int32_t Run::getTimeTrgStart() const
{
    return m_TimeTrgStart;
}

void Run::setTimeTrgStart(int32_t value)
{
    m_TimeTrgStart = value;
    m_TimeTrgStartIsSet = true;
}

bool Run::timeTrgStartIsSet() const
{
    return m_TimeTrgStartIsSet;
}

void Run::unsetTimeTrgStart()
{
    m_TimeTrgStartIsSet = false;
}
int32_t Run::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void Run::setUpdatedAt(int32_t value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool Run::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void Run::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
}
}
}
}


