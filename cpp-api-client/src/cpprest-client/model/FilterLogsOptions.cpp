/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.0.0-beta2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "FilterLogsOptions.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




FilterLogsOptions::FilterLogsOptions()
{
    m_Author = utility::conversions::to_string_t("");
    m_AuthorIsSet = false;
    m_CreatedIsSet = false;
    m_OriginIsSet = false;
    m_ParentLog = 0L;
    m_ParentLogIsSet = false;
    m_RootLog = 0L;
    m_RootLogIsSet = false;
    m_TagIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
}

FilterLogsOptions::~FilterLogsOptions()
{
}

void FilterLogsOptions::validate()
{
    // TODO: implement validation
}

web::json::value FilterLogsOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AuthorIsSet)
    {
        val[utility::conversions::to_string_t("author")] = ModelBase::toJson(m_Author);
    }
    if(m_CreatedIsSet)
    {
        val[utility::conversions::to_string_t("created")] = ModelBase::toJson(m_Created);
    }
    if(m_OriginIsSet)
    {
        val[utility::conversions::to_string_t("origin")] = ModelBase::toJson(m_Origin);
    }
    if(m_ParentLogIsSet)
    {
        val[utility::conversions::to_string_t("parentLog")] = ModelBase::toJson(m_ParentLog);
    }
    if(m_RootLogIsSet)
    {
        val[utility::conversions::to_string_t("rootLog")] = ModelBase::toJson(m_RootLog);
    }
    if(m_TagIsSet)
    {
        val[utility::conversions::to_string_t("tag")] = ModelBase::toJson(m_Tag);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t("title")] = ModelBase::toJson(m_Title);
    }

    return val;
}

bool FilterLogsOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("author")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("author"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_author;
            ok &= ModelBase::fromJson(fieldValue, refVal_author);
            setAuthor(refVal_author);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("created")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("created"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FilterLogsCreatedOptions> refVal_created;
            ok &= ModelBase::fromJson(fieldValue, refVal_created);
            setCreated(refVal_created);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("origin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("origin"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LogOrigin> refVal_origin;
            ok &= ModelBase::fromJson(fieldValue, refVal_origin);
            setOrigin(refVal_origin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parentLog")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parentLog"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_parentLog;
            ok &= ModelBase::fromJson(fieldValue, refVal_parentLog);
            setParentLog(refVal_parentLog);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rootLog")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rootLog"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_rootLog;
            ok &= ModelBase::fromJson(fieldValue, refVal_rootLog);
            setRootLog(refVal_rootLog);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tag")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("tag"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FilterLogsTagOptions> refVal_tag;
            ok &= ModelBase::fromJson(fieldValue, refVal_tag);
            setTag(refVal_tag);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("title")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("title"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_title;
            ok &= ModelBase::fromJson(fieldValue, refVal_title);
            setTitle(refVal_title);
        }
    }
    return ok;
}

void FilterLogsOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AuthorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("author"), m_Author));
    }
    if(m_CreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created"), m_Created));
    }
    if(m_OriginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("origin"), m_Origin));
    }
    if(m_ParentLogIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parentLog"), m_ParentLog));
    }
    if(m_RootLogIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rootLog"), m_RootLog));
    }
    if(m_TagIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tag"), m_Tag));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title"), m_Title));
    }
}

bool FilterLogsOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("author")))
    {
        utility::string_t refVal_author;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("author")), refVal_author );
        setAuthor(refVal_author);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("created")))
    {
        std::shared_ptr<FilterLogsCreatedOptions> refVal_created;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("created")), refVal_created );
        setCreated(refVal_created);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("origin")))
    {
        std::shared_ptr<LogOrigin> refVal_origin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("origin")), refVal_origin );
        setOrigin(refVal_origin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parentLog")))
    {
        int64_t refVal_parentLog;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parentLog")), refVal_parentLog );
        setParentLog(refVal_parentLog);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rootLog")))
    {
        int64_t refVal_rootLog;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rootLog")), refVal_rootLog );
        setRootLog(refVal_rootLog);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tag")))
    {
        std::shared_ptr<FilterLogsTagOptions> refVal_tag;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tag")), refVal_tag );
        setTag(refVal_tag);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title")))
    {
        utility::string_t refVal_title;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("title")), refVal_title );
        setTitle(refVal_title);
    }
    return ok;
}

utility::string_t FilterLogsOptions::getAuthor() const
{
    return m_Author;
}

void FilterLogsOptions::setAuthor(const utility::string_t& value)
{
    m_Author = value;
    m_AuthorIsSet = true;
}

bool FilterLogsOptions::authorIsSet() const
{
    return m_AuthorIsSet;
}

void FilterLogsOptions::unsetAuthor()
{
    m_AuthorIsSet = false;
}
std::shared_ptr<FilterLogsCreatedOptions> FilterLogsOptions::getCreated() const
{
    return m_Created;
}

void FilterLogsOptions::setCreated(const std::shared_ptr<FilterLogsCreatedOptions>& value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}

bool FilterLogsOptions::createdIsSet() const
{
    return m_CreatedIsSet;
}

void FilterLogsOptions::unsetCreated()
{
    m_CreatedIsSet = false;
}
std::shared_ptr<LogOrigin> FilterLogsOptions::getOrigin() const
{
    return m_Origin;
}

void FilterLogsOptions::setOrigin(const std::shared_ptr<LogOrigin>& value)
{
    m_Origin = value;
    m_OriginIsSet = true;
}

bool FilterLogsOptions::originIsSet() const
{
    return m_OriginIsSet;
}

void FilterLogsOptions::unsetOrigin()
{
    m_OriginIsSet = false;
}
int64_t FilterLogsOptions::getParentLog() const
{
    return m_ParentLog;
}

void FilterLogsOptions::setParentLog(int64_t value)
{
    m_ParentLog = value;
    m_ParentLogIsSet = true;
}

bool FilterLogsOptions::parentLogIsSet() const
{
    return m_ParentLogIsSet;
}

void FilterLogsOptions::unsetParentLog()
{
    m_ParentLogIsSet = false;
}
int64_t FilterLogsOptions::getRootLog() const
{
    return m_RootLog;
}

void FilterLogsOptions::setRootLog(int64_t value)
{
    m_RootLog = value;
    m_RootLogIsSet = true;
}

bool FilterLogsOptions::rootLogIsSet() const
{
    return m_RootLogIsSet;
}

void FilterLogsOptions::unsetRootLog()
{
    m_RootLogIsSet = false;
}
std::shared_ptr<FilterLogsTagOptions> FilterLogsOptions::getTag() const
{
    return m_Tag;
}

void FilterLogsOptions::setTag(const std::shared_ptr<FilterLogsTagOptions>& value)
{
    m_Tag = value;
    m_TagIsSet = true;
}

bool FilterLogsOptions::tagIsSet() const
{
    return m_TagIsSet;
}

void FilterLogsOptions::unsetTag()
{
    m_TagIsSet = false;
}
utility::string_t FilterLogsOptions::getTitle() const
{
    return m_Title;
}

void FilterLogsOptions::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool FilterLogsOptions::titleIsSet() const
{
    return m_TitleIsSet;
}

void FilterLogsOptions::unsetTitle()
{
    m_TitleIsSet = false;
}
}
}
}
}


