/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.0.0-beta2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CreateAttachments.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




CreateAttachments::CreateAttachments()
{
    m_AttachmentsIsSet = false;
}

CreateAttachments::~CreateAttachments()
{
}

void CreateAttachments::validate()
{
    // TODO: implement validation
}

web::json::value CreateAttachments::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AttachmentsIsSet)
    {
        val[utility::conversions::to_string_t("attachments")] = ModelBase::toJson(m_Attachments);
    }

    return val;
}

bool CreateAttachments::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("attachments")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("attachments"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Attachment>> refVal_attachments;
            ok &= ModelBase::fromJson(fieldValue, refVal_attachments);
            setAttachments(refVal_attachments);
        }
    }
    return ok;
}

void CreateAttachments::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AttachmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("attachments"), m_Attachments));
    }
}

bool CreateAttachments::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("attachments")))
    {
        std::vector<std::shared_ptr<Attachment>> refVal_attachments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("attachments")), refVal_attachments );
        setAttachments(refVal_attachments);
    }
    return ok;
}

std::vector<std::shared_ptr<Attachment>>& CreateAttachments::getAttachments()
{
    return m_Attachments;
}

void CreateAttachments::setAttachments(const std::vector<std::shared_ptr<Attachment>>& value)
{
    m_Attachments = value;
    m_AttachmentsIsSet = true;
}

bool CreateAttachments::attachmentsIsSet() const
{
    return m_AttachmentsIsSet;
}

void CreateAttachments::unsetAttachments()
{
    m_AttachmentsIsSet = false;
}
}
}
}
}


