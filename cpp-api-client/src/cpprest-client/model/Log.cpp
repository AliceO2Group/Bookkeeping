/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Log.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Log::Log()
{
    m_AttachmentsIsSet = false;
    m_AuthorIsSet = false;
    m_CreatedAt = 0L;
    m_CreatedAtIsSet = false;
    m_Id = 0L;
    m_IdIsSet = false;
    m_OriginIsSet = false;
    m_ParentLogId = 0L;
    m_ParentLogIdIsSet = false;
    m_Replies = 0L;
    m_RepliesIsSet = false;
    m_RootLogId = 0L;
    m_RootLogIdIsSet = false;
    m_RunsIsSet = false;
    m_SubsystemsIsSet = false;
    m_SubtypeIsSet = false;
    m_TagsIsSet = false;
    m_Text = utility::conversions::to_string_t("");
    m_TextIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_UpdatedAt = 0L;
    m_UpdatedAtIsSet = false;
}

Log::~Log()
{
}

void Log::validate()
{
    // TODO: implement validation
}

web::json::value Log::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AttachmentsIsSet)
    {
        val[utility::conversions::to_string_t(U("attachments"))] = ModelBase::toJson(m_Attachments);
    }
    if(m_AuthorIsSet)
    {
        val[utility::conversions::to_string_t(U("author"))] = ModelBase::toJson(m_Author);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_OriginIsSet)
    {
        val[utility::conversions::to_string_t(U("origin"))] = ModelBase::toJson(m_Origin);
    }
    if(m_ParentLogIdIsSet)
    {
        val[utility::conversions::to_string_t(U("parentLogId"))] = ModelBase::toJson(m_ParentLogId);
    }
    if(m_RepliesIsSet)
    {
        val[utility::conversions::to_string_t(U("replies"))] = ModelBase::toJson(m_Replies);
    }
    if(m_RootLogIdIsSet)
    {
        val[utility::conversions::to_string_t(U("rootLogId"))] = ModelBase::toJson(m_RootLogId);
    }
    if(m_RunsIsSet)
    {
        val[utility::conversions::to_string_t(U("runs"))] = ModelBase::toJson(m_Runs);
    }
    if(m_SubsystemsIsSet)
    {
        val[utility::conversions::to_string_t(U("subsystems"))] = ModelBase::toJson(m_Subsystems);
    }
    if(m_SubtypeIsSet)
    {
        val[utility::conversions::to_string_t(U("subtype"))] = ModelBase::toJson(m_Subtype);
    }
    if(m_TagsIsSet)
    {
        val[utility::conversions::to_string_t(U("tags"))] = ModelBase::toJson(m_Tags);
    }
    if(m_TextIsSet)
    {
        val[utility::conversions::to_string_t(U("text"))] = ModelBase::toJson(m_Text);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t(U("title"))] = ModelBase::toJson(m_Title);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedAt"))] = ModelBase::toJson(m_UpdatedAt);
    }

    return val;
}

bool Log::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("attachments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("attachments")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Attachment>> refVal_attachments;
            ok &= ModelBase::fromJson(fieldValue, refVal_attachments);
            setAttachments(refVal_attachments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("author"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("author")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<User> refVal_author;
            ok &= ModelBase::fromJson(fieldValue, refVal_author);
            setAuthor(refVal_author);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("origin"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("origin")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LogOrigin> refVal_origin;
            ok &= ModelBase::fromJson(fieldValue, refVal_origin);
            setOrigin(refVal_origin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("parentLogId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("parentLogId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_parentLogId;
            ok &= ModelBase::fromJson(fieldValue, refVal_parentLogId);
            setParentLogId(refVal_parentLogId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("replies"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("replies")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_replies;
            ok &= ModelBase::fromJson(fieldValue, refVal_replies);
            setReplies(refVal_replies);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rootLogId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rootLogId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_rootLogId;
            ok &= ModelBase::fromJson(fieldValue, refVal_rootLogId);
            setRootLogId(refVal_rootLogId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("runs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("runs")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Log_runs>> refVal_runs;
            ok &= ModelBase::fromJson(fieldValue, refVal_runs);
            setRuns(refVal_runs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subsystems"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subsystems")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Subsystem>> refVal_subsystems;
            ok &= ModelBase::fromJson(fieldValue, refVal_subsystems);
            setSubsystems(refVal_subsystems);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subtype"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subtype")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LogSubtype> refVal_subtype;
            ok &= ModelBase::fromJson(fieldValue, refVal_subtype);
            setSubtype(refVal_subtype);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tags")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Tag>> refVal_tags;
            ok &= ModelBase::fromJson(fieldValue, refVal_tags);
            setTags(refVal_tags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("text"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("text")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_text;
            ok &= ModelBase::fromJson(fieldValue, refVal_text);
            setText(refVal_text);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_title;
            ok &= ModelBase::fromJson(fieldValue, refVal_title);
            setTitle(refVal_title);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedAt")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_updatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedAt);
            setUpdatedAt(refVal_updatedAt);
        }
    }
    return ok;
}

void Log::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AttachmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("attachments")), m_Attachments));
    }
    if(m_AuthorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("author")), m_Author));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_OriginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("origin")), m_Origin));
    }
    if(m_ParentLogIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("parentLogId")), m_ParentLogId));
    }
    if(m_RepliesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("replies")), m_Replies));
    }
    if(m_RootLogIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rootLogId")), m_RootLogId));
    }
    if(m_RunsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("runs")), m_Runs));
    }
    if(m_SubsystemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subsystems")), m_Subsystems));
    }
    if(m_SubtypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subtype")), m_Subtype));
    }
    if(m_TagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tags")), m_Tags));
    }
    if(m_TextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("text")), m_Text));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("title")), m_Title));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedAt")), m_UpdatedAt));
    }
}

bool Log::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("attachments"))))
    {
        std::vector<std::shared_ptr<Attachment>> refVal_attachments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("attachments"))), refVal_attachments );
        setAttachments(refVal_attachments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("author"))))
    {
        std::shared_ptr<User> refVal_author;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("author"))), refVal_author );
        setAuthor(refVal_author);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        int64_t refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int64_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("origin"))))
    {
        std::shared_ptr<LogOrigin> refVal_origin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("origin"))), refVal_origin );
        setOrigin(refVal_origin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("parentLogId"))))
    {
        int64_t refVal_parentLogId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("parentLogId"))), refVal_parentLogId );
        setParentLogId(refVal_parentLogId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("replies"))))
    {
        int64_t refVal_replies;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("replies"))), refVal_replies );
        setReplies(refVal_replies);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rootLogId"))))
    {
        int64_t refVal_rootLogId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rootLogId"))), refVal_rootLogId );
        setRootLogId(refVal_rootLogId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("runs"))))
    {
        std::vector<std::shared_ptr<Log_runs>> refVal_runs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("runs"))), refVal_runs );
        setRuns(refVal_runs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subsystems"))))
    {
        std::vector<std::shared_ptr<Subsystem>> refVal_subsystems;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subsystems"))), refVal_subsystems );
        setSubsystems(refVal_subsystems);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subtype"))))
    {
        std::shared_ptr<LogSubtype> refVal_subtype;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subtype"))), refVal_subtype );
        setSubtype(refVal_subtype);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tags"))))
    {
        std::vector<std::shared_ptr<Tag>> refVal_tags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tags"))), refVal_tags );
        setTags(refVal_tags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("text"))))
    {
        utility::string_t refVal_text;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("text"))), refVal_text );
        setText(refVal_text);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("title"))))
    {
        utility::string_t refVal_title;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("title"))), refVal_title );
        setTitle(refVal_title);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedAt"))))
    {
        int64_t refVal_updatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedAt"))), refVal_updatedAt );
        setUpdatedAt(refVal_updatedAt);
    }
    return ok;
}

std::vector<std::shared_ptr<Attachment>>& Log::getAttachments()
{
    return m_Attachments;
}

void Log::setAttachments(const std::vector<std::shared_ptr<Attachment>>& value)
{
    m_Attachments = value;
    m_AttachmentsIsSet = true;
}

bool Log::attachmentsIsSet() const
{
    return m_AttachmentsIsSet;
}

void Log::unsetAttachments()
{
    m_AttachmentsIsSet = false;
}
std::shared_ptr<User> Log::getAuthor() const
{
    return m_Author;
}

void Log::setAuthor(const std::shared_ptr<User>& value)
{
    m_Author = value;
    m_AuthorIsSet = true;
}

bool Log::authorIsSet() const
{
    return m_AuthorIsSet;
}

void Log::unsetAuthor()
{
    m_AuthorIsSet = false;
}
int64_t Log::getCreatedAt() const
{
    return m_CreatedAt;
}

void Log::setCreatedAt(int64_t value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool Log::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void Log::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
int64_t Log::getId() const
{
    return m_Id;
}

void Log::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Log::idIsSet() const
{
    return m_IdIsSet;
}

void Log::unsetId()
{
    m_IdIsSet = false;
}
std::shared_ptr<LogOrigin> Log::getOrigin() const
{
    return m_Origin;
}

void Log::setOrigin(const std::shared_ptr<LogOrigin>& value)
{
    m_Origin = value;
    m_OriginIsSet = true;
}

bool Log::originIsSet() const
{
    return m_OriginIsSet;
}

void Log::unsetOrigin()
{
    m_OriginIsSet = false;
}
int64_t Log::getParentLogId() const
{
    return m_ParentLogId;
}

void Log::setParentLogId(int64_t value)
{
    m_ParentLogId = value;
    m_ParentLogIdIsSet = true;
}

bool Log::parentLogIdIsSet() const
{
    return m_ParentLogIdIsSet;
}

void Log::unsetParentLogId()
{
    m_ParentLogIdIsSet = false;
}
int64_t Log::getReplies() const
{
    return m_Replies;
}

void Log::setReplies(int64_t value)
{
    m_Replies = value;
    m_RepliesIsSet = true;
}

bool Log::repliesIsSet() const
{
    return m_RepliesIsSet;
}

void Log::unsetReplies()
{
    m_RepliesIsSet = false;
}
int64_t Log::getRootLogId() const
{
    return m_RootLogId;
}

void Log::setRootLogId(int64_t value)
{
    m_RootLogId = value;
    m_RootLogIdIsSet = true;
}

bool Log::rootLogIdIsSet() const
{
    return m_RootLogIdIsSet;
}

void Log::unsetRootLogId()
{
    m_RootLogIdIsSet = false;
}
std::vector<std::shared_ptr<Log_runs>>& Log::getRuns()
{
    return m_Runs;
}

void Log::setRuns(const std::vector<std::shared_ptr<Log_runs>>& value)
{
    m_Runs = value;
    m_RunsIsSet = true;
}

bool Log::runsIsSet() const
{
    return m_RunsIsSet;
}

void Log::unsetRuns()
{
    m_RunsIsSet = false;
}
std::vector<std::shared_ptr<Subsystem>>& Log::getSubsystems()
{
    return m_Subsystems;
}

void Log::setSubsystems(const std::vector<std::shared_ptr<Subsystem>>& value)
{
    m_Subsystems = value;
    m_SubsystemsIsSet = true;
}

bool Log::subsystemsIsSet() const
{
    return m_SubsystemsIsSet;
}

void Log::unsetSubsystems()
{
    m_SubsystemsIsSet = false;
}
std::shared_ptr<LogSubtype> Log::getSubtype() const
{
    return m_Subtype;
}

void Log::setSubtype(const std::shared_ptr<LogSubtype>& value)
{
    m_Subtype = value;
    m_SubtypeIsSet = true;
}

bool Log::subtypeIsSet() const
{
    return m_SubtypeIsSet;
}

void Log::unsetSubtype()
{
    m_SubtypeIsSet = false;
}
std::vector<std::shared_ptr<Tag>>& Log::getTags()
{
    return m_Tags;
}

void Log::setTags(const std::vector<std::shared_ptr<Tag>>& value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}

bool Log::tagsIsSet() const
{
    return m_TagsIsSet;
}

void Log::unsetTags()
{
    m_TagsIsSet = false;
}
utility::string_t Log::getText() const
{
    return m_Text;
}

void Log::setText(const utility::string_t& value)
{
    m_Text = value;
    m_TextIsSet = true;
}

bool Log::textIsSet() const
{
    return m_TextIsSet;
}

void Log::unsetText()
{
    m_TextIsSet = false;
}
utility::string_t Log::getTitle() const
{
    return m_Title;
}

void Log::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool Log::titleIsSet() const
{
    return m_TitleIsSet;
}

void Log::unsetTitle()
{
    m_TitleIsSet = false;
}
int64_t Log::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void Log::setUpdatedAt(int64_t value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool Log::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void Log::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
}
}
}
}


