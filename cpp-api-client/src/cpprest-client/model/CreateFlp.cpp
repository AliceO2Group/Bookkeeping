/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.0.0-beta2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CreateFlp.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




CreateFlp::CreateFlp()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Hostname = utility::conversions::to_string_t("");
    m_HostnameIsSet = false;
    m_RunNumber = 0L;
    m_RunNumberIsSet = false;
}

CreateFlp::~CreateFlp()
{
}

void CreateFlp::validate()
{
    // TODO: implement validation
}

web::json::value CreateFlp::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_HostnameIsSet)
    {
        val[utility::conversions::to_string_t("hostname")] = ModelBase::toJson(m_Hostname);
    }
    if(m_RunNumberIsSet)
    {
        val[utility::conversions::to_string_t("runNumber")] = ModelBase::toJson(m_RunNumber);
    }

    return val;
}

bool CreateFlp::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hostname")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hostname"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_hostname;
            ok &= ModelBase::fromJson(fieldValue, refVal_hostname);
            setHostname(refVal_hostname);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("runNumber")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("runNumber"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_runNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_runNumber);
            setRunNumber(refVal_runNumber);
        }
    }
    return ok;
}

void CreateFlp::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_HostnameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hostname"), m_Hostname));
    }
    if(m_RunNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("runNumber"), m_RunNumber));
    }
}

bool CreateFlp::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hostname")))
    {
        utility::string_t refVal_hostname;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hostname")), refVal_hostname );
        setHostname(refVal_hostname);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("runNumber")))
    {
        int64_t refVal_runNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("runNumber")), refVal_runNumber );
        setRunNumber(refVal_runNumber);
    }
    return ok;
}

utility::string_t CreateFlp::getName() const
{
    return m_Name;
}

void CreateFlp::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool CreateFlp::nameIsSet() const
{
    return m_NameIsSet;
}

void CreateFlp::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t CreateFlp::getHostname() const
{
    return m_Hostname;
}

void CreateFlp::setHostname(const utility::string_t& value)
{
    m_Hostname = value;
    m_HostnameIsSet = true;
}

bool CreateFlp::hostnameIsSet() const
{
    return m_HostnameIsSet;
}

void CreateFlp::unsetHostname()
{
    m_HostnameIsSet = false;
}
int64_t CreateFlp::getRunNumber() const
{
    return m_RunNumber;
}

void CreateFlp::setRunNumber(int64_t value)
{
    m_RunNumber = value;
    m_RunNumberIsSet = true;
}

bool CreateFlp::runNumberIsSet() const
{
    return m_RunNumberIsSet;
}

void CreateFlp::unsetRunNumber()
{
    m_RunNumberIsSet = false;
}
}
}
}
}


