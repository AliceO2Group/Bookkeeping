/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "FilterLogsCreatedOptions.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




FilterLogsCreatedOptions::FilterLogsCreatedOptions()
{
    m_From = 0L;
    m_FromIsSet = false;
    m_To = 0L;
    m_ToIsSet = false;
}

FilterLogsCreatedOptions::~FilterLogsCreatedOptions()
{
}

void FilterLogsCreatedOptions::validate()
{
    // TODO: implement validation
}

web::json::value FilterLogsCreatedOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FromIsSet)
    {
        val[utility::conversions::to_string_t(U("from"))] = ModelBase::toJson(m_From);
    }
    if(m_ToIsSet)
    {
        val[utility::conversions::to_string_t(U("to"))] = ModelBase::toJson(m_To);
    }

    return val;
}

bool FilterLogsCreatedOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("from"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("from")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_from;
            ok &= ModelBase::fromJson(fieldValue, refVal_from);
            setFrom(refVal_from);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("to"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("to")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_to;
            ok &= ModelBase::fromJson(fieldValue, refVal_to);
            setTo(refVal_to);
        }
    }
    return ok;
}

void FilterLogsCreatedOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_FromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("from")), m_From));
    }
    if(m_ToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("to")), m_To));
    }
}

bool FilterLogsCreatedOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("from"))))
    {
        int64_t refVal_from;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("from"))), refVal_from );
        setFrom(refVal_from);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("to"))))
    {
        int64_t refVal_to;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("to"))), refVal_to );
        setTo(refVal_to);
    }
    return ok;
}

int64_t FilterLogsCreatedOptions::getFrom() const
{
    return m_From;
}

void FilterLogsCreatedOptions::setFrom(int64_t value)
{
    m_From = value;
    m_FromIsSet = true;
}

bool FilterLogsCreatedOptions::fromIsSet() const
{
    return m_FromIsSet;
}

void FilterLogsCreatedOptions::unsetFrom()
{
    m_FromIsSet = false;
}
int64_t FilterLogsCreatedOptions::getTo() const
{
    return m_To;
}

void FilterLogsCreatedOptions::setTo(int64_t value)
{
    m_To = value;
    m_ToIsSet = true;
}

bool FilterLogsCreatedOptions::toIsSet() const
{
    return m_ToIsSet;
}

void FilterLogsCreatedOptions::unsetTo()
{
    m_ToIsSet = false;
}
}
}
}
}


