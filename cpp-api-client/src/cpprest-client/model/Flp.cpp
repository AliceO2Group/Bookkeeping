/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.0.0-beta2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Flp.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Flp::Flp()
{
    m_BytesEquipmentReadOut = 0L;
    m_BytesEquipmentReadOutIsSet = false;
    m_BytesFairMqReadOut = 0L;
    m_BytesFairMqReadOutIsSet = false;
    m_BytesProcessed = 0L;
    m_BytesProcessedIsSet = false;
    m_BytesRecordingReadOut = 0L;
    m_BytesRecordingReadOutIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_Hostname = utility::conversions::to_string_t("");
    m_HostnameIsSet = false;
    m_Id = 0L;
    m_IdIsSet = false;
    m_NTimeframes = 0L;
    m_NTimeframesIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
}

Flp::~Flp()
{
}

void Flp::validate()
{
    // TODO: implement validation
}

web::json::value Flp::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BytesEquipmentReadOutIsSet)
    {
        val[utility::conversions::to_string_t("bytesEquipmentReadOut")] = ModelBase::toJson(m_BytesEquipmentReadOut);
    }
    if(m_BytesFairMqReadOutIsSet)
    {
        val[utility::conversions::to_string_t("bytesFairMqReadOut")] = ModelBase::toJson(m_BytesFairMqReadOut);
    }
    if(m_BytesProcessedIsSet)
    {
        val[utility::conversions::to_string_t("bytesProcessed")] = ModelBase::toJson(m_BytesProcessed);
    }
    if(m_BytesRecordingReadOutIsSet)
    {
        val[utility::conversions::to_string_t("bytesRecordingReadOut")] = ModelBase::toJson(m_BytesRecordingReadOut);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_HostnameIsSet)
    {
        val[utility::conversions::to_string_t("hostname")] = ModelBase::toJson(m_Hostname);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NTimeframesIsSet)
    {
        val[utility::conversions::to_string_t("nTimeframes")] = ModelBase::toJson(m_NTimeframes);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t("updatedAt")] = ModelBase::toJson(m_UpdatedAt);
    }

    return val;
}

bool Flp::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("bytesEquipmentReadOut")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bytesEquipmentReadOut"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_bytesEquipmentReadOut;
            ok &= ModelBase::fromJson(fieldValue, refVal_bytesEquipmentReadOut);
            setBytesEquipmentReadOut(refVal_bytesEquipmentReadOut);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bytesFairMqReadOut")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bytesFairMqReadOut"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_bytesFairMqReadOut;
            ok &= ModelBase::fromJson(fieldValue, refVal_bytesFairMqReadOut);
            setBytesFairMqReadOut(refVal_bytesFairMqReadOut);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bytesProcessed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bytesProcessed"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_bytesProcessed;
            ok &= ModelBase::fromJson(fieldValue, refVal_bytesProcessed);
            setBytesProcessed(refVal_bytesProcessed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bytesRecordingReadOut")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bytesRecordingReadOut"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_bytesRecordingReadOut;
            ok &= ModelBase::fromJson(fieldValue, refVal_bytesRecordingReadOut);
            setBytesRecordingReadOut(refVal_bytesRecordingReadOut);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hostname")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hostname"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_hostname;
            ok &= ModelBase::fromJson(fieldValue, refVal_hostname);
            setHostname(refVal_hostname);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nTimeframes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nTimeframes"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_nTimeframes;
            ok &= ModelBase::fromJson(fieldValue, refVal_nTimeframes);
            setNTimeframes(refVal_nTimeframes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updatedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("updatedAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_updatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedAt);
            setUpdatedAt(refVal_updatedAt);
        }
    }
    return ok;
}

void Flp::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BytesEquipmentReadOutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bytesEquipmentReadOut"), m_BytesEquipmentReadOut));
    }
    if(m_BytesFairMqReadOutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bytesFairMqReadOut"), m_BytesFairMqReadOut));
    }
    if(m_BytesProcessedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bytesProcessed"), m_BytesProcessed));
    }
    if(m_BytesRecordingReadOutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bytesRecordingReadOut"), m_BytesRecordingReadOut));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_HostnameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hostname"), m_Hostname));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NTimeframesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nTimeframes"), m_NTimeframes));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updatedAt"), m_UpdatedAt));
    }
}

bool Flp::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("bytesEquipmentReadOut")))
    {
        int64_t refVal_bytesEquipmentReadOut;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bytesEquipmentReadOut")), refVal_bytesEquipmentReadOut );
        setBytesEquipmentReadOut(refVal_bytesEquipmentReadOut);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bytesFairMqReadOut")))
    {
        int64_t refVal_bytesFairMqReadOut;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bytesFairMqReadOut")), refVal_bytesFairMqReadOut );
        setBytesFairMqReadOut(refVal_bytesFairMqReadOut);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bytesProcessed")))
    {
        int64_t refVal_bytesProcessed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bytesProcessed")), refVal_bytesProcessed );
        setBytesProcessed(refVal_bytesProcessed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bytesRecordingReadOut")))
    {
        int64_t refVal_bytesRecordingReadOut;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bytesRecordingReadOut")), refVal_bytesRecordingReadOut );
        setBytesRecordingReadOut(refVal_bytesRecordingReadOut);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hostname")))
    {
        utility::string_t refVal_hostname;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hostname")), refVal_hostname );
        setHostname(refVal_hostname);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int64_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nTimeframes")))
    {
        int64_t refVal_nTimeframes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nTimeframes")), refVal_nTimeframes );
        setNTimeframes(refVal_nTimeframes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updatedAt")))
    {
        utility::datetime refVal_updatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("updatedAt")), refVal_updatedAt );
        setUpdatedAt(refVal_updatedAt);
    }
    return ok;
}

int64_t Flp::getBytesEquipmentReadOut() const
{
    return m_BytesEquipmentReadOut;
}

void Flp::setBytesEquipmentReadOut(int64_t value)
{
    m_BytesEquipmentReadOut = value;
    m_BytesEquipmentReadOutIsSet = true;
}

bool Flp::bytesEquipmentReadOutIsSet() const
{
    return m_BytesEquipmentReadOutIsSet;
}

void Flp::unsetBytesEquipmentReadOut()
{
    m_BytesEquipmentReadOutIsSet = false;
}
int64_t Flp::getBytesFairMqReadOut() const
{
    return m_BytesFairMqReadOut;
}

void Flp::setBytesFairMqReadOut(int64_t value)
{
    m_BytesFairMqReadOut = value;
    m_BytesFairMqReadOutIsSet = true;
}

bool Flp::bytesFairMqReadOutIsSet() const
{
    return m_BytesFairMqReadOutIsSet;
}

void Flp::unsetBytesFairMqReadOut()
{
    m_BytesFairMqReadOutIsSet = false;
}
int64_t Flp::getBytesProcessed() const
{
    return m_BytesProcessed;
}

void Flp::setBytesProcessed(int64_t value)
{
    m_BytesProcessed = value;
    m_BytesProcessedIsSet = true;
}

bool Flp::bytesProcessedIsSet() const
{
    return m_BytesProcessedIsSet;
}

void Flp::unsetBytesProcessed()
{
    m_BytesProcessedIsSet = false;
}
int64_t Flp::getBytesRecordingReadOut() const
{
    return m_BytesRecordingReadOut;
}

void Flp::setBytesRecordingReadOut(int64_t value)
{
    m_BytesRecordingReadOut = value;
    m_BytesRecordingReadOutIsSet = true;
}

bool Flp::bytesRecordingReadOutIsSet() const
{
    return m_BytesRecordingReadOutIsSet;
}

void Flp::unsetBytesRecordingReadOut()
{
    m_BytesRecordingReadOutIsSet = false;
}
utility::datetime Flp::getCreatedAt() const
{
    return m_CreatedAt;
}

void Flp::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool Flp::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void Flp::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::string_t Flp::getHostname() const
{
    return m_Hostname;
}

void Flp::setHostname(const utility::string_t& value)
{
    m_Hostname = value;
    m_HostnameIsSet = true;
}

bool Flp::hostnameIsSet() const
{
    return m_HostnameIsSet;
}

void Flp::unsetHostname()
{
    m_HostnameIsSet = false;
}
int64_t Flp::getId() const
{
    return m_Id;
}

void Flp::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Flp::idIsSet() const
{
    return m_IdIsSet;
}

void Flp::unsetId()
{
    m_IdIsSet = false;
}
int64_t Flp::getNTimeframes() const
{
    return m_NTimeframes;
}

void Flp::setNTimeframes(int64_t value)
{
    m_NTimeframes = value;
    m_NTimeframesIsSet = true;
}

bool Flp::nTimeframesIsSet() const
{
    return m_NTimeframesIsSet;
}

void Flp::unsetNTimeframes()
{
    m_NTimeframesIsSet = false;
}
utility::string_t Flp::getName() const
{
    return m_Name;
}

void Flp::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Flp::nameIsSet() const
{
    return m_NameIsSet;
}

void Flp::unsetName()
{
    m_NameIsSet = false;
}
utility::datetime Flp::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void Flp::setUpdatedAt(const utility::datetime& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool Flp::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void Flp::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
}
}
}
}


