/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Flp.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Flp::Flp()
{
    m_BytesEquipmentReadOut = 0L;
    m_BytesEquipmentReadOutIsSet = false;
    m_BytesFairMQReadOut = 0L;
    m_BytesFairMQReadOutIsSet = false;
    m_BytesProcessed = 0L;
    m_BytesProcessedIsSet = false;
    m_BytesRecordingReadOut = 0L;
    m_BytesRecordingReadOutIsSet = false;
    m_CreatedAt = 0L;
    m_CreatedAtIsSet = false;
    m_Hostname = utility::conversions::to_string_t("");
    m_HostnameIsSet = false;
    m_Id = 0L;
    m_IdIsSet = false;
    m_NTimeframes = 0L;
    m_NTimeframesIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_UpdatedAt = 0L;
    m_UpdatedAtIsSet = false;
}

Flp::~Flp()
{
}

void Flp::validate()
{
    // TODO: implement validation
}

web::json::value Flp::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BytesEquipmentReadOutIsSet)
    {
        val[utility::conversions::to_string_t(U("bytesEquipmentReadOut"))] = ModelBase::toJson(m_BytesEquipmentReadOut);
    }
    if(m_BytesFairMQReadOutIsSet)
    {
        val[utility::conversions::to_string_t(U("bytesFairMQReadOut"))] = ModelBase::toJson(m_BytesFairMQReadOut);
    }
    if(m_BytesProcessedIsSet)
    {
        val[utility::conversions::to_string_t(U("bytesProcessed"))] = ModelBase::toJson(m_BytesProcessed);
    }
    if(m_BytesRecordingReadOutIsSet)
    {
        val[utility::conversions::to_string_t(U("bytesRecordingReadOut"))] = ModelBase::toJson(m_BytesRecordingReadOut);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_HostnameIsSet)
    {
        val[utility::conversions::to_string_t(U("hostname"))] = ModelBase::toJson(m_Hostname);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_NTimeframesIsSet)
    {
        val[utility::conversions::to_string_t(U("nTimeframes"))] = ModelBase::toJson(m_NTimeframes);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedAt"))] = ModelBase::toJson(m_UpdatedAt);
    }

    return val;
}

bool Flp::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("bytesEquipmentReadOut"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bytesEquipmentReadOut")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_bytesEquipmentReadOut;
            ok &= ModelBase::fromJson(fieldValue, refVal_bytesEquipmentReadOut);
            setBytesEquipmentReadOut(refVal_bytesEquipmentReadOut);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bytesFairMQReadOut"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bytesFairMQReadOut")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_bytesFairMQReadOut;
            ok &= ModelBase::fromJson(fieldValue, refVal_bytesFairMQReadOut);
            setBytesFairMQReadOut(refVal_bytesFairMQReadOut);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bytesProcessed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bytesProcessed")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_bytesProcessed;
            ok &= ModelBase::fromJson(fieldValue, refVal_bytesProcessed);
            setBytesProcessed(refVal_bytesProcessed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bytesRecordingReadOut"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bytesRecordingReadOut")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_bytesRecordingReadOut;
            ok &= ModelBase::fromJson(fieldValue, refVal_bytesRecordingReadOut);
            setBytesRecordingReadOut(refVal_bytesRecordingReadOut);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hostname"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hostname")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_hostname;
            ok &= ModelBase::fromJson(fieldValue, refVal_hostname);
            setHostname(refVal_hostname);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nTimeframes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nTimeframes")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_nTimeframes;
            ok &= ModelBase::fromJson(fieldValue, refVal_nTimeframes);
            setNTimeframes(refVal_nTimeframes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedAt")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_updatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedAt);
            setUpdatedAt(refVal_updatedAt);
        }
    }
    return ok;
}

void Flp::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_BytesEquipmentReadOutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bytesEquipmentReadOut")), m_BytesEquipmentReadOut));
    }
    if(m_BytesFairMQReadOutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bytesFairMQReadOut")), m_BytesFairMQReadOut));
    }
    if(m_BytesProcessedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bytesProcessed")), m_BytesProcessed));
    }
    if(m_BytesRecordingReadOutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bytesRecordingReadOut")), m_BytesRecordingReadOut));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_HostnameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hostname")), m_Hostname));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_NTimeframesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nTimeframes")), m_NTimeframes));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedAt")), m_UpdatedAt));
    }
}

bool Flp::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("bytesEquipmentReadOut"))))
    {
        int64_t refVal_bytesEquipmentReadOut;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bytesEquipmentReadOut"))), refVal_bytesEquipmentReadOut );
        setBytesEquipmentReadOut(refVal_bytesEquipmentReadOut);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bytesFairMQReadOut"))))
    {
        int64_t refVal_bytesFairMQReadOut;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bytesFairMQReadOut"))), refVal_bytesFairMQReadOut );
        setBytesFairMQReadOut(refVal_bytesFairMQReadOut);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bytesProcessed"))))
    {
        int64_t refVal_bytesProcessed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bytesProcessed"))), refVal_bytesProcessed );
        setBytesProcessed(refVal_bytesProcessed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bytesRecordingReadOut"))))
    {
        int64_t refVal_bytesRecordingReadOut;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bytesRecordingReadOut"))), refVal_bytesRecordingReadOut );
        setBytesRecordingReadOut(refVal_bytesRecordingReadOut);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        int64_t refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hostname"))))
    {
        utility::string_t refVal_hostname;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hostname"))), refVal_hostname );
        setHostname(refVal_hostname);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int64_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nTimeframes"))))
    {
        int64_t refVal_nTimeframes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nTimeframes"))), refVal_nTimeframes );
        setNTimeframes(refVal_nTimeframes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedAt"))))
    {
        int64_t refVal_updatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedAt"))), refVal_updatedAt );
        setUpdatedAt(refVal_updatedAt);
    }
    return ok;
}

int64_t Flp::getBytesEquipmentReadOut() const
{
    return m_BytesEquipmentReadOut;
}

void Flp::setBytesEquipmentReadOut(int64_t value)
{
    m_BytesEquipmentReadOut = value;
    m_BytesEquipmentReadOutIsSet = true;
}

bool Flp::bytesEquipmentReadOutIsSet() const
{
    return m_BytesEquipmentReadOutIsSet;
}

void Flp::unsetBytesEquipmentReadOut()
{
    m_BytesEquipmentReadOutIsSet = false;
}
int64_t Flp::getBytesFairMQReadOut() const
{
    return m_BytesFairMQReadOut;
}

void Flp::setBytesFairMQReadOut(int64_t value)
{
    m_BytesFairMQReadOut = value;
    m_BytesFairMQReadOutIsSet = true;
}

bool Flp::bytesFairMQReadOutIsSet() const
{
    return m_BytesFairMQReadOutIsSet;
}

void Flp::unsetBytesFairMQReadOut()
{
    m_BytesFairMQReadOutIsSet = false;
}
int64_t Flp::getBytesProcessed() const
{
    return m_BytesProcessed;
}

void Flp::setBytesProcessed(int64_t value)
{
    m_BytesProcessed = value;
    m_BytesProcessedIsSet = true;
}

bool Flp::bytesProcessedIsSet() const
{
    return m_BytesProcessedIsSet;
}

void Flp::unsetBytesProcessed()
{
    m_BytesProcessedIsSet = false;
}
int64_t Flp::getBytesRecordingReadOut() const
{
    return m_BytesRecordingReadOut;
}

void Flp::setBytesRecordingReadOut(int64_t value)
{
    m_BytesRecordingReadOut = value;
    m_BytesRecordingReadOutIsSet = true;
}

bool Flp::bytesRecordingReadOutIsSet() const
{
    return m_BytesRecordingReadOutIsSet;
}

void Flp::unsetBytesRecordingReadOut()
{
    m_BytesRecordingReadOutIsSet = false;
}
int64_t Flp::getCreatedAt() const
{
    return m_CreatedAt;
}

void Flp::setCreatedAt(int64_t value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool Flp::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void Flp::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::string_t Flp::getHostname() const
{
    return m_Hostname;
}

void Flp::setHostname(const utility::string_t& value)
{
    m_Hostname = value;
    m_HostnameIsSet = true;
}

bool Flp::hostnameIsSet() const
{
    return m_HostnameIsSet;
}

void Flp::unsetHostname()
{
    m_HostnameIsSet = false;
}
int64_t Flp::getId() const
{
    return m_Id;
}

void Flp::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Flp::idIsSet() const
{
    return m_IdIsSet;
}

void Flp::unsetId()
{
    m_IdIsSet = false;
}
int64_t Flp::getNTimeframes() const
{
    return m_NTimeframes;
}

void Flp::setNTimeframes(int64_t value)
{
    m_NTimeframes = value;
    m_NTimeframesIsSet = true;
}

bool Flp::nTimeframesIsSet() const
{
    return m_NTimeframesIsSet;
}

void Flp::unsetNTimeframes()
{
    m_NTimeframesIsSet = false;
}
utility::string_t Flp::getName() const
{
    return m_Name;
}

void Flp::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Flp::nameIsSet() const
{
    return m_NameIsSet;
}

void Flp::unsetName()
{
    m_NameIsSet = false;
}
int64_t Flp::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void Flp::setUpdatedAt(int64_t value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool Flp::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void Flp::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
}
}
}
}


