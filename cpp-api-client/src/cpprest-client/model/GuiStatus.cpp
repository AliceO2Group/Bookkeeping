/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GuiStatus.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




GuiStatus::GuiStatus()
{
    m_Ok = false;
    m_OkIsSet = false;
    m_Configured = false;
    m_ConfiguredIsSet = false;
}

GuiStatus::~GuiStatus()
{
}

void GuiStatus::validate()
{
    // TODO: implement validation
}

web::json::value GuiStatus::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_OkIsSet)
    {
        val[utility::conversions::to_string_t(U("ok"))] = ModelBase::toJson(m_Ok);
    }
    if(m_ConfiguredIsSet)
    {
        val[utility::conversions::to_string_t(U("configured"))] = ModelBase::toJson(m_Configured);
    }

    return val;
}

bool GuiStatus::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("ok"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ok")));
        if(!fieldValue.is_null())
        {
            bool refVal_ok;
            ok &= ModelBase::fromJson(fieldValue, refVal_ok);
            setOk(refVal_ok);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("configured"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("configured")));
        if(!fieldValue.is_null())
        {
            bool refVal_configured;
            ok &= ModelBase::fromJson(fieldValue, refVal_configured);
            setConfigured(refVal_configured);
        }
    }
    return ok;
}

void GuiStatus::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_OkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ok")), m_Ok));
    }
    if(m_ConfiguredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("configured")), m_Configured));
    }
}

bool GuiStatus::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("ok"))))
    {
        bool refVal_ok;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ok"))), refVal_ok );
        setOk(refVal_ok);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("configured"))))
    {
        bool refVal_configured;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("configured"))), refVal_configured );
        setConfigured(refVal_configured);
    }
    return ok;
}

bool GuiStatus::isOk() const
{
    return m_Ok;
}

void GuiStatus::setOk(bool value)
{
    m_Ok = value;
    m_OkIsSet = true;
}

bool GuiStatus::okIsSet() const
{
    return m_OkIsSet;
}

void GuiStatus::unsetOk()
{
    m_OkIsSet = false;
}
bool GuiStatus::isConfigured() const
{
    return m_Configured;
}

void GuiStatus::setConfigured(bool value)
{
    m_Configured = value;
    m_ConfiguredIsSet = true;
}

bool GuiStatus::configuredIsSet() const
{
    return m_ConfiguredIsSet;
}

void GuiStatus::unsetConfigured()
{
    m_ConfiguredIsSet = false;
}
}
}
}
}


