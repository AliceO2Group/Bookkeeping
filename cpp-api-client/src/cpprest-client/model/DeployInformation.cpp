/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.0.0-beta2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DeployInformation.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




DeployInformation::DeployInformation()
{
    m_Age = 0.0;
    m_AgeIsSet = false;
    m_Start = 0L;
    m_StartIsSet = false;
}

DeployInformation::~DeployInformation()
{
}

void DeployInformation::validate()
{
    // TODO: implement validation
}

web::json::value DeployInformation::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AgeIsSet)
    {
        val[utility::conversions::to_string_t("age")] = ModelBase::toJson(m_Age);
    }
    if(m_StartIsSet)
    {
        val[utility::conversions::to_string_t("start")] = ModelBase::toJson(m_Start);
    }

    return val;
}

bool DeployInformation::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("age")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("age"));
        if(!fieldValue.is_null())
        {
            double refVal_age;
            ok &= ModelBase::fromJson(fieldValue, refVal_age);
            setAge(refVal_age);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("start")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("start"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_start;
            ok &= ModelBase::fromJson(fieldValue, refVal_start);
            setStart(refVal_start);
        }
    }
    return ok;
}

void DeployInformation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AgeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("age"), m_Age));
    }
    if(m_StartIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("start"), m_Start));
    }
}

bool DeployInformation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("age")))
    {
        double refVal_age;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("age")), refVal_age );
        setAge(refVal_age);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("start")))
    {
        int64_t refVal_start;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("start")), refVal_start );
        setStart(refVal_start);
    }
    return ok;
}

double DeployInformation::getAge() const
{
    return m_Age;
}

void DeployInformation::setAge(double value)
{
    m_Age = value;
    m_AgeIsSet = true;
}

bool DeployInformation::ageIsSet() const
{
    return m_AgeIsSet;
}

void DeployInformation::unsetAge()
{
    m_AgeIsSet = false;
}
int64_t DeployInformation::getStart() const
{
    return m_Start;
}

void DeployInformation::setStart(int64_t value)
{
    m_Start = value;
    m_StartIsSet = true;
}

bool DeployInformation::startIsSet() const
{
    return m_StartIsSet;
}

void DeployInformation::unsetStart()
{
    m_StartIsSet = false;
}
}
}
}
}


