/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.0.0-beta2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "LogSubtype.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



LogSubtype::LogSubtype()
{
}

LogSubtype::~LogSubtype()
{
}

void LogSubtype::validate()
{
    // TODO: implement validation
}

web::json::value LogSubtype::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eLogSubtype::LogSubtype_RUN) val = web::json::value::string(U("run"));
    if (m_value == eLogSubtype::LogSubtype_SUBSYSTEM) val = web::json::value::string(U("subsystem"));
    if (m_value == eLogSubtype::LogSubtype_ANNOUNCEMENT) val = web::json::value::string(U("announcement"));
    if (m_value == eLogSubtype::LogSubtype_INTERVENTION) val = web::json::value::string(U("intervention"));
    if (m_value == eLogSubtype::LogSubtype_COMMENT) val = web::json::value::string(U("comment"));

    return val;
}

bool LogSubtype::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t("run")) m_value = eLogSubtype::LogSubtype_RUN;
    if (s == utility::conversions::to_string_t("subsystem")) m_value = eLogSubtype::LogSubtype_SUBSYSTEM;
    if (s == utility::conversions::to_string_t("announcement")) m_value = eLogSubtype::LogSubtype_ANNOUNCEMENT;
    if (s == utility::conversions::to_string_t("intervention")) m_value = eLogSubtype::LogSubtype_INTERVENTION;
    if (s == utility::conversions::to_string_t("comment")) m_value = eLogSubtype::LogSubtype_COMMENT;
    return true;
}

void LogSubtype::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eLogSubtype::LogSubtype_RUN) s = utility::conversions::to_string_t("run");
    if (m_value == eLogSubtype::LogSubtype_SUBSYSTEM) s = utility::conversions::to_string_t("subsystem");
    if (m_value == eLogSubtype::LogSubtype_ANNOUNCEMENT) s = utility::conversions::to_string_t("announcement");
    if (m_value == eLogSubtype::LogSubtype_INTERVENTION) s = utility::conversions::to_string_t("intervention");
    if (m_value == eLogSubtype::LogSubtype_COMMENT) s = utility::conversions::to_string_t("comment");

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool LogSubtype::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eLogSubtype v;

        
        if (s == utility::conversions::to_string_t("run")) v = eLogSubtype::LogSubtype_RUN;
        if (s == utility::conversions::to_string_t("subsystem")) v = eLogSubtype::LogSubtype_SUBSYSTEM;
        if (s == utility::conversions::to_string_t("announcement")) v = eLogSubtype::LogSubtype_ANNOUNCEMENT;
        if (s == utility::conversions::to_string_t("intervention")) v = eLogSubtype::LogSubtype_INTERVENTION;
        if (s == utility::conversions::to_string_t("comment")) v = eLogSubtype::LogSubtype_COMMENT;

        setValue(v);
    }
    return ok;
}

LogSubtype::eLogSubtype LogSubtype::getValue() const
{
   return m_value;
}

void LogSubtype::setValue(LogSubtype::eLogSubtype const value)
{
   m_value = value;
}


}
}
}
}


