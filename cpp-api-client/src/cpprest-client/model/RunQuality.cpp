/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.0.0-beta2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RunQuality.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



RunQuality::RunQuality()
{
}

RunQuality::~RunQuality()
{
}

void RunQuality::validate()
{
    // TODO: implement validation
}

web::json::value RunQuality::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eRunQuality::RunQuality_GOOD) val = web::json::value::string(U("good"));
    if (m_value == eRunQuality::RunQuality_BAD) val = web::json::value::string(U("bad"));
    if (m_value == eRunQuality::RunQuality_UNKNOWN) val = web::json::value::string(U("unknown"));

    return val;
}

bool RunQuality::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t("good")) m_value = eRunQuality::RunQuality_GOOD;
    if (s == utility::conversions::to_string_t("bad")) m_value = eRunQuality::RunQuality_BAD;
    if (s == utility::conversions::to_string_t("unknown")) m_value = eRunQuality::RunQuality_UNKNOWN;
    return true;
}

void RunQuality::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eRunQuality::RunQuality_GOOD) s = utility::conversions::to_string_t("good");
    if (m_value == eRunQuality::RunQuality_BAD) s = utility::conversions::to_string_t("bad");
    if (m_value == eRunQuality::RunQuality_UNKNOWN) s = utility::conversions::to_string_t("unknown");

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool RunQuality::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eRunQuality v;

        
        if (s == utility::conversions::to_string_t("good")) v = eRunQuality::RunQuality_GOOD;
        if (s == utility::conversions::to_string_t("bad")) v = eRunQuality::RunQuality_BAD;
        if (s == utility::conversions::to_string_t("unknown")) v = eRunQuality::RunQuality_UNKNOWN;

        setValue(v);
    }
    return ok;
}

RunQuality::eRunQuality RunQuality::getValue() const
{
   return m_value;
}

void RunQuality::setValue(RunQuality::eRunQuality const value)
{
   m_value = value;
}


}
}
}
}


