/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.0.0-beta2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PaginationOptions.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




PaginationOptions::PaginationOptions()
{
    m_Limit = 0;
    m_LimitIsSet = false;
    m_Offset = 0;
    m_OffsetIsSet = false;
}

PaginationOptions::~PaginationOptions()
{
}

void PaginationOptions::validate()
{
    // TODO: implement validation
}

web::json::value PaginationOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_LimitIsSet)
    {
        val[utility::conversions::to_string_t("limit")] = ModelBase::toJson(m_Limit);
    }
    if(m_OffsetIsSet)
    {
        val[utility::conversions::to_string_t("offset")] = ModelBase::toJson(m_Offset);
    }

    return val;
}

bool PaginationOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("limit")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("limit"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_limit;
            ok &= ModelBase::fromJson(fieldValue, refVal_limit);
            setLimit(refVal_limit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("offset")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("offset"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_offset;
            ok &= ModelBase::fromJson(fieldValue, refVal_offset);
            setOffset(refVal_offset);
        }
    }
    return ok;
}

void PaginationOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_LimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("limit"), m_Limit));
    }
    if(m_OffsetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("offset"), m_Offset));
    }
}

bool PaginationOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("limit")))
    {
        int32_t refVal_limit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("limit")), refVal_limit );
        setLimit(refVal_limit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("offset")))
    {
        int32_t refVal_offset;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("offset")), refVal_offset );
        setOffset(refVal_offset);
    }
    return ok;
}

int32_t PaginationOptions::getLimit() const
{
    return m_Limit;
}

void PaginationOptions::setLimit(int32_t value)
{
    m_Limit = value;
    m_LimitIsSet = true;
}

bool PaginationOptions::limitIsSet() const
{
    return m_LimitIsSet;
}

void PaginationOptions::unsetLimit()
{
    m_LimitIsSet = false;
}
int32_t PaginationOptions::getOffset() const
{
    return m_Offset;
}

void PaginationOptions::setOffset(int32_t value)
{
    m_Offset = value;
    m_OffsetIsSet = true;
}

bool PaginationOptions::offsetIsSet() const
{
    return m_OffsetIsSet;
}

void PaginationOptions::unsetOffset()
{
    m_OffsetIsSet = false;
}
}
}
}
}


