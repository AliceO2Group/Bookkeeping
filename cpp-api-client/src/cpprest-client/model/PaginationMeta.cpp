/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PaginationMeta.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




PaginationMeta::PaginationMeta()
{
    m_PageCount = 0L;
    m_PageCountIsSet = false;
    m_TotalCount = 0L;
    m_TotalCountIsSet = false;
}

PaginationMeta::~PaginationMeta()
{
}

void PaginationMeta::validate()
{
    // TODO: implement validation
}

web::json::value PaginationMeta::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PageCountIsSet)
    {
        val[utility::conversions::to_string_t(U("pageCount"))] = ModelBase::toJson(m_PageCount);
    }
    if(m_TotalCountIsSet)
    {
        val[utility::conversions::to_string_t(U("totalCount"))] = ModelBase::toJson(m_TotalCount);
    }

    return val;
}

bool PaginationMeta::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("pageCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pageCount")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_pageCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_pageCount);
            setPageCount(refVal_pageCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("totalCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("totalCount")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_totalCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_totalCount);
            setTotalCount(refVal_totalCount);
        }
    }
    return ok;
}

void PaginationMeta::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PageCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pageCount")), m_PageCount));
    }
    if(m_TotalCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("totalCount")), m_TotalCount));
    }
}

bool PaginationMeta::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("pageCount"))))
    {
        int64_t refVal_pageCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pageCount"))), refVal_pageCount );
        setPageCount(refVal_pageCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("totalCount"))))
    {
        int64_t refVal_totalCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("totalCount"))), refVal_totalCount );
        setTotalCount(refVal_totalCount);
    }
    return ok;
}

int64_t PaginationMeta::getPageCount() const
{
    return m_PageCount;
}

void PaginationMeta::setPageCount(int64_t value)
{
    m_PageCount = value;
    m_PageCountIsSet = true;
}

bool PaginationMeta::pageCountIsSet() const
{
    return m_PageCountIsSet;
}

void PaginationMeta::unsetPageCount()
{
    m_PageCountIsSet = false;
}
int64_t PaginationMeta::getTotalCount() const
{
    return m_TotalCount;
}

void PaginationMeta::setTotalCount(int64_t value)
{
    m_TotalCount = value;
    m_TotalCountIsSet = true;
}

bool PaginationMeta::totalCountIsSet() const
{
    return m_TotalCountIsSet;
}

void PaginationMeta::unsetTotalCount()
{
    m_TotalCountIsSet = false;
}
}
}
}
}


