/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.0.0-beta2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ErrorSource.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ErrorSource::ErrorSource()
{
    m_Pointer = utility::conversions::to_string_t("");
    m_PointerIsSet = false;
}

ErrorSource::~ErrorSource()
{
}

void ErrorSource::validate()
{
    // TODO: implement validation
}

web::json::value ErrorSource::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PointerIsSet)
    {
        val[utility::conversions::to_string_t("pointer")] = ModelBase::toJson(m_Pointer);
    }

    return val;
}

bool ErrorSource::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("pointer")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pointer"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_pointer;
            ok &= ModelBase::fromJson(fieldValue, refVal_pointer);
            setPointer(refVal_pointer);
        }
    }
    return ok;
}

void ErrorSource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_PointerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pointer"), m_Pointer));
    }
}

bool ErrorSource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("pointer")))
    {
        utility::string_t refVal_pointer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pointer")), refVal_pointer );
        setPointer(refVal_pointer);
    }
    return ok;
}

utility::string_t ErrorSource::getPointer() const
{
    return m_Pointer;
}

void ErrorSource::setPointer(const utility::string_t& value)
{
    m_Pointer = value;
    m_PointerIsSet = true;
}

bool ErrorSource::pointerIsSet() const
{
    return m_PointerIsSet;
}

void ErrorSource::unsetPointer()
{
    m_PointerIsSet = false;
}
}
}
}
}


