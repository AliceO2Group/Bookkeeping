/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.0.0-beta2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Log_runs.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Log_runs::Log_runs()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_RunNumber = 0L;
    m_RunNumberIsSet = false;
}

Log_runs::~Log_runs()
{
}

void Log_runs::validate()
{
    // TODO: implement validation
}

web::json::value Log_runs::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_RunNumberIsSet)
    {
        val[utility::conversions::to_string_t("runNumber")] = ModelBase::toJson(m_RunNumber);
    }

    return val;
}

bool Log_runs::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("runNumber")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("runNumber"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_runNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_runNumber);
            setRunNumber(refVal_runNumber);
        }
    }
    return ok;
}

void Log_runs::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_RunNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("runNumber"), m_RunNumber));
    }
}

bool Log_runs::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int64_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("runNumber")))
    {
        int64_t refVal_runNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("runNumber")), refVal_runNumber );
        setRunNumber(refVal_runNumber);
    }
    return ok;
}

int64_t Log_runs::getId() const
{
    return m_Id;
}

void Log_runs::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Log_runs::idIsSet() const
{
    return m_IdIsSet;
}

void Log_runs::unsetId()
{
    m_IdIsSet = false;
}
int64_t Log_runs::getRunNumber() const
{
    return m_RunNumber;
}

void Log_runs::setRunNumber(int64_t value)
{
    m_RunNumber = value;
    m_RunNumberIsSet = true;
}

bool Log_runs::runNumberIsSet() const
{
    return m_RunNumberIsSet;
}

void Log_runs::unsetRunNumber()
{
    m_RunNumberIsSet = false;
}
}
}
}
}


