name: Bookkeeping

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.set-cache-key.outputs.cache-key }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
      - name: Generate cache key
        id: set-cache-key
        run: echo "::set-output name=cache-key::${{ runner.os }}-buildx-${{ github.run_id }}-${{ github.run_attempt }}"
      - name: Restore cache
        id: cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ steps.set-cache-key.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build and cache Docker image
        run: |
          docker buildx build \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache,mode=max \
            --file Dockerfile \
            --tag test_app:latest \
            --load .

  parallel_tests:
    name: ${{ matrix.test_type }}
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        test_type: [unit,
                    api,
                    lhcPeriods,
                    lhcFills,
                    logs,
                    envs,
                    runs,
                    subsystems,
                    tags,
                    flps,
                    home,
                    about,
                    eosReport,
                    dataPasses,
                    simulationPasses,
                    qcFlagTypes,
                    qcFlags]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Restore cache
        id: cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ needs.build.outputs.cache-key }}

      - name: Create Coverage Directory
        run: mkdir -p ${{ github.workspace }}/coverage

      - name: Set COMPOSE_PROJECT_NAME
        run: echo "COMPOSE_PROJECT_NAME=${{ matrix.test_type }}_app" >> $GITHUB_ENV

      - name: Build and Start Test Database
        run: |
          docker-compose \
          -f docker-compose.test-parallel-base.yml \
          -f docker-compose.test-parallel-ci.yml \
          up --detach test_db
      - name: Build Test Container
        run: |
          docker-compose \
          -f docker-compose.test-parallel-base.yml \
          -f docker-compose.test-parallel-ci.yml \
          build test_app
      - name: Run Tests
        run: |
          docker-compose \
          -f docker-compose.test-parallel-base.yml \
          -f docker-compose.test-parallel-ci.yml \
          run test_app
        env:
          TEST_TYPE: ${{ matrix.test_type }}
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      - name: Clean Up
        run: |
          docker-compose \
          -f docker-compose.test-parallel-base.yml \
          -f docker-compose.test-parallel-ci.yml \
          down

  linter:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
      - name: Installing dependencies
        run: npm ci
      - name: Running linter
        run: npm run lint
