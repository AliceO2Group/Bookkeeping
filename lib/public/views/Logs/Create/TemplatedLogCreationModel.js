/**
 *  @license
 *  Copyright CERN and copyright holders of ALICE O2. This software is
 *  distributed under the terms of the GNU General Public License v3 (GPL
 *  Version 3), copied verbatim in the file "COPYING".
 *
 *  See http://alice-o2.web.cern.ch/license for full licensing information.
 *
 *  In applying this license CERN does not waive the privileges and immunities
 *  granted to it by virtue of its status as an Intergovernmental Organization
 *  or submit itself to any jurisdiction.
 */
import { LogCreationModel } from './LogCreationModel.js';
import { OnCallLogTemplate } from './templates/OnCallLogTemplate.js';
import { RcDailyMeetingTemplate } from './templates/RcDailyMeetingTemplate.js';

// Only one template for now
/**
 * @typedef {OnCallLogTemplate|RcDailyMeetingTemplate} LogTemplate
 */

/**
 * @typedef {'on-call'|'rc-daily-meeting'} logTemplateKey
 */

/**
 * Return a new instance of log template for the given key
 *
 * @param {logTemplateKey} key the template key
 * @return {LogTemplate|null} the new log template
 */
const logTemplatesFactory = (key) => {
    const templateClass = {
        ['on-call']: OnCallLogTemplate,
        ['rc-daily-meeting']: RcDailyMeetingTemplate,
    }[key] ?? null;
    if (templateClass) {
        return new templateClass();
    }
    return null;
};

/**
 * Log creation model based on templates
 */
export class TemplatedLogCreationModel extends LogCreationModel {
    /**
     * Constructor
     *
     * @param {function} [onCreation] function called when log is created, with the id of the created log
     * @param {LogCreationRelations} relations the relations of the log
     */
    constructor(onCreation, relations) {
        super(onCreation, relations);

        /**
         * @type {logTemplateKey|null}
         * @private
         */
        this._templateKey = null;

        /**
         * @type {LogTemplate|null}
         * @private
         */
        this._templateModel = null;
    }

    /**
     * Defines the template to use, defined by its key
     *
     * @param {logTemplateKey|null} key the key of the template to use (there may be no model for the given key)
     * @return {void}
     */
    useTemplate(key) {
        const templateModel = logTemplatesFactory(key);
        if (templateModel) {
            templateModel.bubbleTo(this);
        }
        this._templateModel = templateModel;
        this._templateKey = key;

        /**
         * Apply the template's provided tags to the current creation tag picker model
         *
         * @return {void}
         */
        const applyTemplateTags = () => {
            for (const tag of templateModel?.tags$?.getCurrent() ?? []) {
                this._creationTagsPickerModel.select(tag);
            }
        };

        // If template model expose tags, observe it
        templateModel?.tags$?.observe(applyTemplateTags);

        // When creation tag picker available option changes, apply template tags
        this._creationTagsPickerModel.visualChange$.observe(applyTemplateTags);

        // Apply template tags now, to apply at least the default tags
        this._creationTagsPickerModel.reset();
        applyTemplateTags();

        this.notify();
    }

    /**
     * Set the current template key
     *
     * @return {logTemplateKey|null} the current key
     */
    get templateKey() {
        return this._templateKey;
    }

    /**
     * Return the current template model
     *
     * @return {LogTemplate|null} the template model
     */
    get templateModel() {
        return this._templateModel;
    }

    /**
     * States if the log creation is valid
     *
     * @return {boolean} true if the form is valid
     */
    get isValid() {
        return this._templateModel?.isValid ?? super.isValid;
    }

    /*
     * Return log properties generated by the current template if it exists, else return the parent's property
     */

    // eslint-disable-next-line valid-jsdoc
    /**
     * @inheritDoc
     */
    get title() {
        return this._templateModel?.title ?? super.title;
    }

    // eslint-disable-next-line valid-jsdoc
    /**
     * @inheritDoc
     */
    set title(title) {
        super.title = title;
    }

    // eslint-disable-next-line valid-jsdoc
    /**
     * @inheritDoc
     */
    get text() {
        return this._templateModel?.text ?? super.text;
    }

    // eslint-disable-next-line valid-jsdoc
    /**
     * @inheritDoc
     */
    set text(text) {
        super.text = text;
    }
}
